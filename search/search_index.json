{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome To WEB1","text":"<p>This is the course website for WEB1 - a course that serves as an introduction to front-end web development and core web standards. Students will gain proficiency in HTML, CSS, and JavaScript, while developing the competencies necessary to create responsive, user-friendly, interactive, and dynamic websites.</p> <p>In the sidebar, you'll find the course sessions, each with their own preparation material and exercises.</p> <p>The course is structured into 12 sessions, covering 8 topics and 3 hands-on projects. Each session will generally consist of the following:</p> <ol> <li> <p>Preparation: Before class, you'll go through assigned material - primarily videos, supplemented by selected online readings. Expect to dedicate some time to preparation, as most of the theoretical content is covered in advance.</p> </li> <li> <p>Recap: We'll kick things off with a brief but focused review of the most essential concepts.</p> </li> <li> <p>Exercises: You'll dive into exercises that reinforce and expand on what you've learned.</p> </li> <li> <p>Review &amp; Discussion: We'll go through some of the exercises together and discuss their solutions.</p> </li> </ol> <p>This structure gives you the flexibility to engage with the theory at your own pace before each session, allowing our time together to be dynamic, interactive, and focused on applying what you've learned rather than just passively absorbing information. However, to get the most out of each session, it's essential that you come prepared and actively participate.</p>"},{"location":"01-the-web-and-html/","title":"The Web &amp; HTML","text":"<p>In your first session, we'll cover how the web works \u2014 from internet basics to how browsers load sites \u2014 and dive into HTML fundamentals to build your first web page. You'll also get set up with VS Code. Let's get started!</p>"},{"location":"01-the-web-and-html/#preparation","title":"Preparation","text":""},{"location":"01-the-web-and-html/#web-infrastructure","title":"Web Infrastructure","text":"<p>Start by watching the video below. It introduces the core infrastructure behind the web \u2014 from how the internet works to how browsers retrieve and display websites \u2014 covering essential concepts like IP addresses, DNS, HTTP, and the client-server model.</p> <p>If you want to learn more, here are some additional resources on the topic:</p> <p>How does the Internet work? How the web works </p>"},{"location":"01-the-web-and-html/#vs-code-setup","title":"VS Code Setup","text":"<p>The choice of IDE or text editor is up to you, but the recommended steps below will get you up and running smoothly:</p> <ol> <li>Download and install VS Code.</li> <li>Turn on auto save (Go to <code>File &gt; Auto Save</code>)</li> <li>Enable format on save: Open Settings, search for \u201cFormat On Save,\u201d and check <code>Editor: Format On Save</code></li> <li>Install Prettier. Set it as the default formatter by searching \u201cDefault Formatter\u201d in Settings and selecting <code>Prettier \u2014 Code formatter</code>.</li> <li>Install Live Server. This plugin allows you to preview your site with automatic reload on save. To use it: Right-click your HTML file in the editor, and select <code>Open with Live Server</code>.</li> </ol>"},{"location":"01-the-web-and-html/#html-basics","title":"HTML Basics","text":"<p>Watch the video below to create your first website by learning the fundamentals of HTML, including the structure of web pages through elements, tags, attributes, and best practices like semantic markup and proper nesting.</p> <p>After watching the video, explore these additional resources from MDN to deepen your understanding:</p> <p>Basic HTML Syntax Web page metadata Headings and paragraphs Emphasis and importance Lists Creating links HTML images HTML table basics Structuring documents </p>"},{"location":"01-the-web-and-html/#exercises","title":"Exercises","text":""},{"location":"01-the-web-and-html/#the-journey-of-a-web-request","title":"The Journey of a Web Request","text":"<p>Creating diagrams is a valuable skill for software engineers \u2014 it helps you break down complex systems and communicate ideas effectively. Draw a diagram that illustrates what happens behind the scenes when you visit a website:</p> <ol> <li>Think about what's involved when your browser loads a website. Some key elements might include: The browser, DNS, HTTP, routers, HTML...</li> <li>Create a diagram of the interaction between the elements \u2014 either on pen and paper or using a drawing program such as excalidraw.</li> <li>(Optional) Upload an image of the diagram to e.g. imgur, and share it in the comment section below. The comments accepts some HTML, so you can use an <code>&lt;img&gt;</code> element to display it (don't forget to add the image extension to the URL!). You can use the preview tab to make sure that the image is working before posting it.</li> </ol>"},{"location":"01-the-web-and-html/#star-pizza","title":"Star Pizza","text":"<p>Congratulations \u2014 you are now the restaurant owner of Star Pizza!</p> <ol> <li>Use the text below as a starting point for your website. Start by adding markup to it.</li> <li>Add a catchy title to the website in the <code>&lt;head&gt;</code> element.</li> <li>Add more items to the menu (e.g. pasta, beverages)</li> <li>Organize menu items into groups with headlines (Pizzas, Pasta, and Beverages).</li> <li>Use these pizza images to create an appetizing menu for Star Pizza.</li> <li>Use Paint or another picture editing tool to resize the images of pasta dishes and beverages and add these to this menu page.</li> <li>Make image links for all images. Clicking on one should open a new window with a large version of the item clicked.</li> </ol> <pre><code>Star Pizza\n\nAt Star Pizza we use only quality ingredients and prepare the food\nunder hygienic conditions.\n\nDear Customer!\nWe can deliver food for your lunch break if your order at least 2 hours\nbefore delivery.\n\nFree delivery every day when buying for at least kr. 110,-.\n\nPizzas\n\n1. Margarita (Tomato, Cheese)\n2. Hawaii (Tomato, Cheese, Ham, Pineapple)\n3. Milano (Tomato, cheese, Ham, Mushrooms)\n4. Mamma Mia(Tomato, cheese, Ham, Pepperoni, Onions)\n5. Pepperoni (Tomato, Cheese, Pepperoni, Pineapple)\n\nSpecial offers\n* Buy 2 family or 4 standard pizzas and get one 1\u00bd liter Cola FREE.\n* Buy 2 pizzas and get one serving of tzatziki FREE on pick-up.\n\nOpening hours\nMonday, Tuesday     15.00 - 22.00\nWednesday           15.00 - 22.00\nThursday, Friday    15.00 - 22.00\nSaturday, Sunday    13.00 - 22.00\n</code></pre>"},{"location":"01-the-web-and-html/#an-early-aprils-fools","title":"An Early April's Fools!","text":"<p>Getting comfortable with your browser's developer tools is an essential skill for any web developer. It lets you inspect, debug, and experiment with a websites code directly in the browser.</p> <p>Use your browser's developer tools to temporarily edit a real website and make it look like something unbelievable has happened!</p> <ol> <li>Visit a real website \u2014 a news site, Wikipedia article, product page, etc. (Choose something with a lot of text and structure you can play with.)</li> <li>Open your browser's developer tools (Right-click &gt; Inspect or press F12)</li> <li>Modify the text, headlines, or images directly in the browser to create a fake but convincing piece of news.</li> <li>(Optional) Take a screenshot, upload it to imgur, and share it in the comment section below.</li> </ol>"},{"location":"01-the-web-and-html/#introduce-yourself","title":"Introduce Yourself!","text":"<p>Create your own personal website that the class can visit to get to know you!  It is okay to put in fake data if you want privacy </p> <p>Requirements:</p> <ul> <li>A minimum of 3 HTML pages:<ul> <li>index.html: Your homepage with an introduction and picture (optional).</li> <li>about.html: More details about who you are. Why did you chose to study at VIA?</li> <li>interests.html: Hobbies, interests, or things you're passionate about.</li> </ul> </li> <li>A shared navigation bar (on all pages) that lets users click between your pages.</li> <li>Use of semantic HTML elements where appropriate (<code>&lt;header&gt;</code>, <code>&lt;nav&gt;</code>, <code>&lt;main&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;article&gt;</code>, <code>&lt;footer&gt;</code>, etc.)</li> <li>A table to organize information. It could be your weekly schedule, your favorite movies/games/books or something else entirely.</li> <li>A footer with contact information and links to your social accounts.</li> </ul>"},{"location":"01-the-web-and-html/#hosting-your-site","title":"Hosting Your Site","text":"<p>A website without hosting is like a concert with no audience \u2014 let's get your website online so the world can see it!</p> <ol> <li>Create an account on GitHub.</li> <li>Install git on your computer.</li> <li>In VS Code, click on the Source Control tab and select \"Publish to Github\" to publish a public repository.</li> <li>Click the \"Open on Github\" popup.</li> <li>On Github, go to \"Settings\" &gt; \"Pages\". Go to \"Branch\", click on \"None\", select \"main\" and click \"Save\".</li> <li>Wait a minute and refresh the page. The URL to your website should now appear at the top of the page.</li> <li>Share the URL in the comment section below (again, HTML is supported, so you can use the <code>&lt;a&gt;</code> (anchor) element)!</li> </ol> <p>As an alternative to Github Pages, you can use Netlify Drop \u2014 just drag and drop your project files, and your site will be live in seconds! It's free to use, though you'll need an account to keep your site password free and online permanently.</p>"},{"location":"01-the-web-and-html/#nice-work","title":"Nice Work!","text":"<p>Take a few minutes to browse the images and personal websites your classmates have made. Click around, get to know them, and see how everyone approached the exercises in their own way. Leave a comment on a post if it caught your attention </p> <p>Remember that you can use your browser's developer tools to inspect the source code and learn from the websites you are visiting!</p>"},{"location":"02-css/","title":"CSS","text":"<p>In this session, we'll take our first steps into the world of CSS \u2013 Cascading Style Sheets. You'll learn how CSS helps us style and design web pages, from changing colors and fonts to adjusting alignments and spacing. Let's make the web look good!</p>"},{"location":"02-css/#preparation","title":"Preparation","text":""},{"location":"02-css/#css-basics","title":"CSS Basics","text":"<p>In the first video, we'll explore the different ways you can apply CSS to your HTML, understand how inheritance works, and get familiar with some of the most common styling properties.</p> <p>You can read about the concepts in depth here:</p> <p>Adding CSS to our document Using common selectors Inheritance </p>"},{"location":"02-css/#colors","title":"Colors","text":"<p>Next we'll look at how to work with colors in CSS. We'll cover three popular color formats: RGB, hex and HSL. You'll also get a quick intro to hexadecimal numbers along the way.</p> <p>If you want to know more, web.dev has a good resource on colors. </p>"},{"location":"02-css/#the-box-model","title":"The Box Model","text":"<p>Let's explore the CSS box model \u2014 a core concept for understanding how elements are sized and spaced on a web page. You'll learn how content, padding, borders, and margins all fit together to shape every element on the screen.</p> <p>Web.dev also has a good resource on the box model that you can check out.</p>"},{"location":"02-css/#css-selectors-specificity","title":"CSS Selectors &amp; Specificity","text":"<p>Lastly, we'll look at CSS selectors and how they let you target specific elements on your page. You'll also learn about specificity and the cascade \u2014 the rules CSS uses to decide which styles win when there's a conflict.</p> <p>The concepts are also covered on web.dev:</p> <p>Selectors The Cascade Specificity </p>"},{"location":"02-css/#exercises","title":"Exercises","text":""},{"location":"02-css/#even-more-you","title":"Even More You!","text":"<p>Make your personal website from last session truly your own by styling it:</p> <ol> <li>Set a background color for the entire page.</li> <li>Change the text color of specific elements (e.g., headings or paragraphs).</li> <li>Choose a different font by updating the font-family and adjusting the font-size for better readability.</li> <li>Center some of the content, such as the main heading or introduction text.</li> <li>Style the included tables.</li> <li>Include margin, padding and borders on relevant boxes.</li> <li>Use custom properties for your websites colors.</li> <li>Come up with more styling improvements to your site!</li> <li>Share your updated work in the comment section below.</li> </ol>"},{"location":"02-css/#box-sizing","title":"Box Sizing","text":"<p>The HTML below contains two boxes. Change the width of the second box to match that of the first box.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Box Sizing&lt;/title&gt;\n        &lt;style&gt;\n            .box {\n                text-align: center;\n                border: 10px solid;\n                padding: 50px;\n                margin: 20px;\n                width: 400px;\n            }\n\n            .alternate {\n                box-sizing: border-box;\n            }\n\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=\"box\"&gt;I use content-box box-sizing&lt;/div&gt;\n        &lt;div class=\"box alternate\"&gt;I use border-box box-sizing&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Solution <pre><code>.alternate {\n    box-sizing: border-box;\n    width: 520px;\n}\n</code></pre>"},{"location":"02-css/#sizing-units","title":"Sizing Units","text":"<p>CSS gives you many ways to size elements. The most common are:</p> <ul> <li><code>px</code> \u2192 absolute size in pixels</li> <li><code>%</code> \u2192 relative to the size of the parent element</li> <li><code>rem</code> \u2192 relative to the font size of the root (html)</li> <li><code>em</code> \u2192 relative to the font size of the element</li> </ul> <p>Experiment with the website below, answering the following questions:</p> <ul> <li>What happens when you change the font size for the html element? Why?</li> <li>Change the width of the inner box to 200 pixels. How is this different from 50% here?</li> <li>Change the font-size unit of the inner element from rem to em. What happens? Why?</li> <li>Which unit scales when resizing the browser window?</li> <li>Why might rem be better for consistent typography across the site?</li> <li>What would be the issue of using pixel units across the site?</li> <li>When would you use pixels instead of relative units?</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;style&gt;\n            html {\n                font-size: 16px;\n            }\n\n            .outer {\n                width: 400px;\n                height: 200px;\n                background-color: lightblue;\n                padding: 20px;\n                font-size: 2em; \n            }\n\n            .inner {\n                width: 50%;\n                height: 50%; \n                background-color: coral;\n                font-size: 2rem; \n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=\"outer\"&gt;\n            &lt;div class=\"inner\"&gt;Inner box&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"02-css/#a-taste-for-selectors","title":"A Taste For Selectors!","text":"<p>To practice your CSS selector skills, try out CSS Diner \u2014 a game where you have to select the right elements on a dining table using CSS!</p>"},{"location":"02-css/#a-navigation-bar","title":"A Navigation Bar","text":"<p>A navigation bar should be a list of links! Build a horizontal navigation bar using the list below. Style the bar with background color, spacing, and hover effects, and create a style that highlights the active page link.</p> <pre><code>&lt;nav&gt;\n    &lt;ul&gt;\n        &lt;li&gt;&lt;a href=\"index.html\" class=\"active\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"services.html\"&gt;Services&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"about.html\"&gt;About&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"contact.html\"&gt;Contact&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre> <p>Here is an example of what the navigation bar could look like:</p> <p></p> <p>It might be worth noting that you can use the <code>display</code> property to set whether an element is treated as a block or inline box. List items do not have markers when they are treated as inline elements.</p> Example Solution <pre><code>nav {\n    text-align: center;\n    font-family: sans-serif;\n    font-weight: bold;\n    background: #2196f3;\n    padding-block: 1rem;\n}\n\nnav ul {\n    margin: 0;\n    padding: 0;\n}\n\nnav li {\n    display: inline;\n    margin: 0;\n    padding: 0;\n}\n\nnav a {\n    text-decoration: none;\n    color: white;\n    padding: 1rem;\n}\n\nnav a:hover {\n    background: #1976d275;\n}\n\nnav a.active {\n    background: #1976d2;\n}\n</code></pre>"},{"location":"02-css/#css-zen-garden","title":"CSS Zen Garden","text":"<p>In this exercise, you'll use CSS to redesign the CSS Zen Garden webpage. The HTML stays the same \u2014 your task is to transform the look entirely through styling. We haven't covered everything yet (like layout techniques), so don't worry if your version isn't as elaborate as the examples on the site. Focus on practicing what you know and exploring what's possible with CSS!</p> <p>When you're done, host your site and share the link in the comment section below!</p>"},{"location":"02-css/#nice-work","title":"Nice Work!","text":"<p>Take a few minutes to browse the work of your classmates. Leave a comment if something catches your attention </p>"},{"location":"03-layout/","title":"Layout","text":"<p>In this session, we'll dive into CSS layouts. You\u2019ll learn how to make web pages adapt to various screen sizes while exploring the essential layout tools: Flexbox, Grid and media queries.</p>"},{"location":"03-layout/#preparation","title":"Preparation","text":""},{"location":"03-layout/#responsive-web-design","title":"Responsive Web Design","text":"<p>HTML is naturally responsive, but once you start styling your website, that flexibility can break. Fixed widths and absolute positioning may look fine on your current device, but it's important to consider how your site appears across different screen sizes. Watch the video below for an introduction to the basics of responsive design, and learn how to work with the browser rather than against it!</p> <p>If you want a written overview of todays session, MDN has created an article on responsive web design, that is worth a read.</p>"},{"location":"03-layout/#flexbox","title":"Flexbox","text":"<p>Flexbox is a one-dimensional layout model that makes it easier to arrange items in rows or columns. It creates a container that can adapt to different screen sizes, letting its child elements grow, shrink, or align neatly. Watch the video below to get an overview of the problems Flexbox tries to solve and how to use it.</p> <p>CSS-Tricks has a comprehensive guide on Flexbox, that covers everything from basic terminology and properties to useful examples and tricks. Give it a read to explore Flexbox in depth.</p>"},{"location":"03-layout/#css-grid","title":"CSS Grid","text":"<p>CSS Grid is a powerful two-dimensional layout model that organizes content into rows and columns, giving you precise control over both horizontal and vertical alignment. Because most websites naturally follow a grid structure, CSS Grid is especially well-suited for designing the overall layout of a page. Watch the video below to get a deeper understand of how it works.</p> <p>You can also read about CSS Grid on CSS-Tricks.</p>"},{"location":"03-layout/#media-queries","title":"Media Queries","text":"<p>Flexbox and Grid are inherently responsive and often sufficient for most layouts. However, media queries let you go further by applying styles conditionally based on factors like screen size or device features. They allow you to define breakpoints - specific screen widths where the design changes - so you can fine-tune layouts beyond what Flexbox and Grid can handle on their own.</p> <p>If you want to learn more about media queries and the various media features, take a look at web.dev's article on media queries.</p> <p>The videos in this session didn't cover basic CSS positioning, since its use cases have become less common with the rise of Flexbox and Grid. However, positioning remains very useful in certain small scale layout scenarios (e.g. for tooltips, modal dialogs, and fixed headers). I recommend reading up on it to get an understanding of the different positioning methods, such as <code>relative</code>, <code>absolute</code> and <code>fixed</code>.</p>"},{"location":"03-layout/#exercises","title":"Exercises","text":""},{"location":"03-layout/#basic-responsiveness","title":"Basic Responsiveness","text":"<p>You have been hired to make the website for the startup \"EcoBottles\" more responsive. Using the provided HTML code and the product banner, please address the following issues:</p> <ul> <li>Text Width: The text content currently extends across the entire screen on large displays. Please constrain the text to a maximum width of 1000 pixels.</li> <li>Image Responsiveness: The product banner image overflows its container on smaller screens, forcing horizontal scrolling. Ensure the image scales down fluidly to fit within the viewport.</li> <li>Mobile Optimization: The website lacks the proper viewport meta tag, which is essential for ensuring correct scaling and a good user experience on mobile devices. Please add the necessary tag to resolve this.</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\" /&gt;\n\n        &lt;title&gt;EcoBottle - Sustainable Water Bottles&lt;/title&gt;\n        &lt;style&gt;\n            body {\n                font-family: \"Open Sans\";\n                background-color: #f4f7fc;\n            }\n\n            header {\n                text-align: center;\n                color: #2f72f0;\n                font-size: 2rem;\n                padding: 1rem;\n            }\n\n            h2 {\n                color: #2c3e50;\n            }\n\n            footer {\n                text-align: center;\n                font-size: 0.8rem;\n                color: #777;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;header&gt;\n            &lt;h1&gt;Welcome to EcoBottle - Sustainable Water Bottles&lt;/h1&gt;\n        &lt;/header&gt;\n\n        &lt;main&gt;\n            &lt;section&gt;\n                &lt;h2&gt;What is EcoBottle?&lt;/h2&gt;\n                &lt;p&gt;\n                    EcoBottle is a new kind of startup dedicated to reducing plastic waste by offering reusable, stylish, and highly durable water bottles. Our\n                    mission is simple: make it easier for people everywhere to stay hydrated while making a positive impact on the planet. Each EcoBottle is\n                    made from recycled materials, BPA-free, and designed to last for years.\n                &lt;/p&gt;\n\n                &lt;img src=\"/images/ecobottle.png\" alt=\"EcoBottle products\" /&gt;\n\n                &lt;p&gt;\n                    Whether you're an athlete, a student, or simply someone who wants to live more sustainably, EcoBottle is designed to fit seamlessly into\n                    your lifestyle. With a range of sizes, colors, and accessories, our bottles are perfect for the office, the gym, or even a hiking trip.\n                    Every purchase supports global clean water initiatives, so you're not just buying a bottle-you're contributing to meaningful change.\n                &lt;/p&gt;\n            &lt;/section&gt;\n\n            &lt;section&gt;\n                &lt;h2&gt;Why Choose EcoBottle?&lt;/h2&gt;\n                &lt;p&gt;\n                    Traditional single-use plastic bottles contribute millions of tons of waste to our oceans and landfills each year. By switching to\n                    EcoBottle, you're helping cut down on that waste while enjoying a healthier, more convenient alternative. Our bottles are not only\n                    environmentally friendly but also engineered for performance, keeping your drinks hot or cold for hours.\n                &lt;/p&gt;\n                &lt;p&gt;\n                    EcoBottle focuses on simplicity and accessibility. You don't need to be an eco-expert to make a difference-just refill your bottle each day.\n                    Small habits like this add up to massive positive change for the environment. Plus, we've made sure our bottles are affordable and backed by\n                    a lifetime warranty to give you peace of mind.\n                &lt;/p&gt;\n                &lt;p&gt;\n                    Beyond functionality, EcoBottle is also about style and self-expression. With customizable sleeves and engraved options, you can make your\n                    EcoBottle truly your own. It's more than a product-it's a movement to shift how we think about everyday consumption.\n                &lt;/p&gt;\n            &lt;/section&gt;\n\n            &lt;section&gt;\n                &lt;h2&gt;Simple Steps to Get Started&lt;/h2&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;\n                        &lt;strong&gt;Order your EcoBottle:&lt;/strong&gt; Visit our online shop and choose the size and style that best fits your lifestyle. We offer free\n                        shipping on all first-time orders.\n                    &lt;/li&gt;\n                    &lt;li&gt;\n                        &lt;strong&gt;Start using it daily:&lt;/strong&gt; Replace disposable bottles with your EcoBottle. Refill it at home, at work, or at refill stations\n                        around your city.\n                    &lt;/li&gt;\n                    &lt;li&gt;\n                        &lt;strong&gt;Track your impact:&lt;/strong&gt; Use our mobile app to log how many single-use bottles you've saved from landfills and oceans. You'll\n                        see your personal contribution to reducing plastic waste.\n                    &lt;/li&gt;\n                    &lt;li&gt;\n                        &lt;strong&gt;Customize your bottle:&lt;/strong&gt; Add a protective sleeve, a stainless-steel straw, or even a custom engraving to make it unique.\n                        Your EcoBottle can be as individual as you are.\n                    &lt;/li&gt;\n                    &lt;li&gt;\n                        &lt;strong&gt;Spread the word:&lt;/strong&gt; Encourage friends, family, and coworkers to join the movement. Every EcoBottle sold supports clean\n                        water projects in underserved communities worldwide.\n                    &lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/section&gt;\n        &lt;/main&gt;\n\n        &lt;footer&gt;\u00a92025 EcoBottle Inc. All rights reserved.&lt;/footer&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"03-layout/#flexbox-froggy","title":"Flexbox Froggy","text":"<p>Practice your flexbox skills by playing Flexbox Froggy!</p> <p>Pay attention to how properties like justify-content, align-items, and flex-direction affect the placement of the frogs and try to explain in your own words what each property does.</p>"},{"location":"03-layout/#tag-arrangement","title":"Tag Arrangement","text":"<p>Using the code below as a starting point, create a layout for the tags, that resembles the image below.</p> <p></p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;style&gt;\n        body {\n            font: 1.2em / 1.5 sans-serif;\n            background: #eee;\n        }\n\n        .recipe {\n            background: #fff;\n            border-radius: 12px;\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n            padding: 1rem;\n            max-width: 350px;\n        }\n\n        p {\n            margin-bottom: 0px;\n        }\n\n        img {\n            max-width: 100%;\n            border-radius: 12px;\n        }\n\n        .recipe h2 {\n            margin-top: 0;\n            margin-bottom: 0.5rem;\n            text-align: center;\n        }\n\n        .tags {\n            list-style: none;\n            padding: 0px;\n            margin: 0.25rem 0.25rem 1rem 0.25rem;\n        }\n\n        .tags&gt;li {\n            background: #e4ffe0;\n            color: #305a24;\n            padding: 0.25rem 0.75rem;\n            border-radius: 12px;\n            font-size: 0.85rem;\n        }\n\n        .tags {\n            /* YOUR CODE HERE */\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div class=\"recipe\"&gt;\n            &lt;h2&gt;Pasta Primavera&lt;/h2&gt;\n            &lt;ul class=\"tags\"&gt;\n                &lt;li&gt;Vegetarian&lt;/li&gt;\n                &lt;li&gt;Vegan&lt;/li&gt;\n                &lt;li&gt;Gluten-free&lt;/li&gt;\n                &lt;li&gt;Healthy&lt;/li&gt;\n                &lt;li&gt;Light&lt;/li&gt;\n                &lt;li&gt;Seasonal&lt;/li&gt;\n                &lt;li&gt;Italian&lt;/li&gt;\n                &lt;li&gt;Comfort food&lt;/li&gt;\n                &lt;li&gt;Quick meal&lt;/li&gt;\n                &lt;li&gt;Family-friendly&lt;/li&gt;\n            &lt;/ul&gt;\n            &lt;img src=\"https://raw.githubusercontent.com/KasperKnop/WEB1/refs/heads/main/resources/pasta-primavera.png\"&gt;\n        &lt;p&gt;A light and fresh italian pasta dish with seasonal vegetables.&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Solution <pre><code>tags {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 0.25rem;\n}\n</code></pre>"},{"location":"03-layout/#navigation-bar-with-flexbox","title":"Navigation Bar With Flexbox","text":"<p>Reimplement the navigation bar from last week using Flexbox. Try to make it look the same:</p> <p></p> <pre><code>&lt;nav&gt;\n    &lt;ul&gt;\n        &lt;li&gt;&lt;a href=\"index.html\" class=\"active\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"services.html\"&gt;Services&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"about.html\"&gt;About&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"contact.html\"&gt;Contact&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre> Solution <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;style&gt;\n            nav {\n                font-family: sans-serif;\n                font-weight: bold;\n                background: #2196f3;\n            }\n\n            nav ul {\n                padding: 0px;\n                display: flex;\n                flex-wrap: wrap;\n                justify-content: center;\n                list-style: none;\n            }\n\n            nav a {\n                text-decoration: none;\n                color: white;\n                padding: 1rem;\n                display: block;\n            }\n\n            nav a:hover {\n                background: #1976d275;\n            }\n\n            nav a.active {\n                background: #1976d2;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;nav&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"index.html\" class=\"active\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"services.html\"&gt;Services&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"about.html\"&gt;About&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"contact.html\"&gt;Contact&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/nav&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"03-layout/#grid-garden","title":"Grid Garden","text":"<p>Learn the basics of CSS Grid with Grid Garden!</p> <p>Focus on how grid-area, grid-template, and the fr unit work and try to explain it in your own words.</p>"},{"location":"03-layout/#responsive-grids","title":"Responsive Grids","text":"<p>Create a responsive grid of cards where all items keep the same size and the grid adapts to the viewport: more columns on wide screens, fewer on small screens.</p> <p>Focus on the use of grid-template-columns, gap, and responsive patterns with repeat(), auto-fill/auto-fit and minmax().</p> <p>Use the code below as a starting point.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" /&gt;\n    &lt;title&gt;Grid Exercise&lt;/title&gt;\n    &lt;style&gt;\n        * {\n            box-sizing: border-box;\n        }\n\n        body {\n            font-family: Roboto, Arial;\n            padding: 2rem;\n            background: #f6f7fb;\n        }\n\n        .card {\n            background: white;\n            border-radius: 8px;\n            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);\n            display: grid;\n            place-items: center;\n            font-size: 2rem;\n            aspect-ratio: 1 / 1;\n        }\n\n        .grid {\n            /* YOUR CODE HERE */\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;main&gt;\n        &lt;section class=\"grid\"&gt;\n            &lt;article class=\"card\"&gt;1&lt;/article&gt;\n            &lt;article class=\"card\"&gt;2&lt;/article&gt;\n            &lt;article class=\"card\"&gt;3&lt;/article&gt;\n            &lt;article class=\"card\"&gt;4&lt;/article&gt;\n            &lt;article class=\"card\"&gt;5&lt;/article&gt;\n            &lt;article class=\"card\"&gt;6&lt;/article&gt;\n            &lt;article class=\"card\"&gt;7&lt;/article&gt;\n            &lt;article class=\"card\"&gt;8&lt;/article&gt;\n            &lt;article class=\"card\"&gt;9&lt;/article&gt;\n        &lt;/section&gt;\n    &lt;/main&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Example Solution <pre><code>.grid {\n    display: grid;\n    gap: 1rem;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n}\n</code></pre>"},{"location":"03-layout/#the-holy-grail","title":"The Holy Grail","text":"<p>The classic layout pattern below is known as the holy grail. It has a header, footer, left sidebar, right sidebar, and main content. Any left over space is allocated for the main content. Try implementing it with Grid.</p> <p></p> Solution <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;style&gt;\n        body {\n            margin: 0;\n            font-family: sans-serif;\n            font-size: 4rem;\n            text-align: center;\n        }\n\n        .wrapper {\n            display: grid;\n            grid-template: auto 1fr auto / auto 1fr auto;\n            height: 100vh;\n            grid-template-areas:\n                \"header header header\"\n                \"left main right\"\n                \"footer footer footer\";\n        }\n\n        .section {\n            padding: 2rem;\n        }\n\n        header {\n            grid-area: header;\n            background-color: #FFEDDB;\n        }\n\n        .left-side {\n            grid-area: left;\n            background-color: #CEF;\n        }\n\n        main {\n            grid-area: main;\n            background-color: #EAFDE7;\n        }\n\n        .right-side {\n            grid-area: right;\n            background-color: #FFDBFF;\n        }\n\n        footer {\n            grid-area: footer;\n            background-color: #FFEDDB;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"wrapper\"&gt;\n        &lt;header class=\"section\"&gt;Header&lt;/header&gt;\n        &lt;div class=\"left-side section\"&gt;Left Sidebar&lt;/div&gt;\n        &lt;main class=\"section\"&gt;Main Content&lt;/main&gt;\n        &lt;div class=\"right-side section\"&gt;Right Sidebar&lt;/div&gt;\n        &lt;footer class=\"section\"&gt;Footer&lt;/footer&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"03-layout/#stacking","title":"Stacking","text":"<p>The customer was very satisfied with your work on arranging tags earlier. However, now they want the tags on top of the image, as illustrated below!</p> <p></p> <p>You might have to add a grid container, that can hold both the image and the list of tags, and use the <code>z-index</code> property to determine which element is rendered on top.</p> Example Solution <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;style&gt;\n        body {\n            font: 1.2em / 1.5 sans-serif;\n            background: #eee;\n        }\n\n        .recipe {\n            background: #fff;\n            border-radius: 12px;\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n            padding: 1rem;\n            max-width: 350px;\n        }\n\n        p {\n            margin-bottom: 0px;\n        }\n\n        img {\n            max-width: 100%;\n            border-radius: 12px;\n            grid-area: stack;\n        }\n\n        .recipe h2 {\n            margin-top: 0;\n            margin-bottom: 0.5rem;\n            text-align: center;\n        }\n\n        .tags {\n            list-style: none;\n            padding: 0px;\n            margin: 0.25rem 0.25rem 1rem 0.25rem;\n        }\n\n        .tags&gt;li {\n            background: #e4ffe0;\n            color: #305a24;\n            padding: 0.25rem 0.75rem;\n            border-radius: 12px;\n            font-size: 0.85rem;\n        }\n\n        .tags {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 0.25rem;\n            grid-area: stack;\n            align-items: center;\n            align-content: start;\n            z-index: 1;\n        }\n\n        #grid {\n            display: grid;\n            grid-template-areas: \"stack\"\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div class=\"recipe\"&gt;\n        &lt;div id=\"grid\"&gt;\n            &lt;h2&gt;Pasta Primavera&lt;/h2&gt;\n            &lt;ul class=\"tags\"&gt;\n                &lt;li&gt;Vegetarian&lt;/li&gt;\n                &lt;li&gt;Vegan&lt;/li&gt;\n                &lt;li&gt;Gluten-free&lt;/li&gt;\n                &lt;li&gt;Healthy&lt;/li&gt;\n                &lt;li&gt;Light&lt;/li&gt;\n                &lt;li&gt;Seasonal&lt;/li&gt;\n                &lt;li&gt;Italian&lt;/li&gt;\n                &lt;li&gt;Comfort food&lt;/li&gt;\n                &lt;li&gt;Quick meal&lt;/li&gt;\n                &lt;li&gt;Family-friendly&lt;/li&gt;\n            &lt;/ul&gt;\n            &lt;img src=\"https://raw.githubusercontent.com/KasperKnop/WEB1/refs/heads/main/resources/pasta-primavera.png\"&gt;\n        &lt;/div&gt;\n        &lt;p&gt;A light and fresh italian pasta dish with seasonal vegetables.&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"03-layout/#introducing-breakpoints","title":"Introducing Breakpoints","text":"<p>Use media queries to make sure only the appropriate header is shown. Try not to touch the HTML (you will need to find a way to select each header individually). It's worth noting that you can hide an element by setting its <code>display</code> property to <code>none</code>.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Media Queries Exercise&lt;/title&gt;\n    &lt;style&gt;\n        /* YOUR CODE HERE */\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Mobile&lt;/h1&gt;\n    &lt;h1&gt;Tablet&lt;/h1&gt;\n    &lt;h1&gt;Desktop&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Solution <pre><code>h1 {\n  display: none;\n}\n\n@media (max-width: 480px) {\n  h1:nth-of-type(1) {\n    display: block;\n  }\n}\n\n@media (min-width: 481px) and (max-width: 1024px) {\n  h1:nth-of-type(2) {\n    display: block;\n  }\n}\n\n@media (min-width: 1025px) {\n  h1:nth-of-type(3) {\n    display: block;\n  }\n}\n</code></pre>"},{"location":"03-layout/#improving-layouts","title":"Improving Layouts","text":"<p>You now have the tools necessary to improve the layout of the websites that you made previously. Pick one (Star Pizza, your personal site, or CSS Zen Garden) and focus on finding good use cases for Flexbox, Grid and media queries. Share the link in the comments when you are done.</p>"},{"location":"03-layout/#nice-work","title":"Nice Work!","text":"<p>Take some time to browse through the layouts shared in the comments. Consider whether they have applied Flexbox, Grid, and media queries appropriately. If you can assess whether the right tools are chosen for each layout, you're on the right path to mastering responsive web design!</p>"},{"location":"04-first-project/","title":"First Project","text":""},{"location":"04-first-project/#a-personal-cv-portfolio","title":"A Personal CV &amp; Portfolio","text":"<p>For your first project, you will create a personal website that serves as both a digital CV and a portfolio. Having your own website is a valuable asset when applying for jobs or internships \u2013 it helps you stand out and showcase your skills. Unfortunately, many students underestimate the importance of this early on. This is your chance to get a head start. If you put in a bit of effort now, it could make a real difference in the future!</p> <p>Requirements:</p> <ul> <li>Include at least three separate pages:<ul> <li>About Me \u2013 A brief introduction with your name, background, interests, and a profile image.</li> <li>CV \u2013 A clearly structured overview of your education, work experience, certifications, languages and volunteer work.</li> <li>Portfolio \u2013 Showcase at least five projects, each with a name, short description, technologies used, a project link, and an image.</li> </ul> </li> <li>Include a consistent navigation bar visible on all pages.</li> <li>The layout must be responsive and adapt well to at least the following screen widths: 375px, 768px and 1024px.</li> <li>Use Grid, Flexbox and media queries to construct the layout. Find at least one good use case for each.</li> <li>Style the layout using only external CSS.</li> <li>Use semantic HTML elements when possible.</li> <li>Ensure consistent design, typography, and layout across all pages.</li> <li>Organize files into folders (e.g. <code>/images/</code>) and use lowercase, hyphenated file names (e.g. <code>about-me.html</code>).</li> <li>Your code must pass HTML and CSS validation.</li> </ul> <p>Don\u2019t worry if you don\u2019t have much content yet \u2014 feel free to use placeholder images and fictional examples to help design and structure your CV or portfolio. The focus is on practicing what you have learned so far.</p> <p>You are more than welcome to get creative and add more requirements, but we are focusing on learning the fundamentals, so don't use JavaScript or any external libraries or frameworks (e.g., Bootstrap and Tailwind) yet.</p> <p>Tips</p> <ul> <li>The projects will be discussed at the exam. Focus on applying what you've learned to make it easier to explain and showcase your skills. A more interesting project might lead to a more interesting discussion.</li> <li>Plan before you code! Sketch the website (at various screen sizes) and come up with a good layout approach before you start the implementation. It is often easier to start with the mobile layout first (mobile-first design) and only introduce media queries when needed.</li> </ul>"},{"location":"04-first-project/#submission","title":"Submission\ud83d\udce4","text":"<p>This is an individual project. The deadline can be found on itslearning. Hand in before the deadline if you want feedback.</p> <p>You must host the website using GitHub Pages and submit the link to the site using the handin slot on itslearning.</p>"},{"location":"05-forms/","title":"Forms","text":"<p>So far, we have only created web pages, that the user can look at. In this session, we'll explore how to create more interactive pages, using HTML forms, that allow the user to provide input. We will explore how that input can be sent to a web server and how to make forms user friendly.</p>"},{"location":"05-forms/#preparation","title":"Preparation","text":""},{"location":"05-forms/#html-form-basics","title":"HTML Form Basics","text":"<p>In the video below you will get an introduction to HTML forms. You\u2019ll learn to create forms with different input types, understand how they send data to a server and how to validate the forms client-side using e.g regular expressions.</p> <p>If you want to take a deep dive into HTML forms, MDN has a web forms module that provides a comprehensive coverage of the topic. The \"Your first form\" section covers the basics.</p> <p>If you want to learn more about regular expressions, you can read this article from MDN on regular expressions. They also have a good regex cheet sheet.</p>"},{"location":"05-forms/#styling-forms","title":"Styling Forms","text":"<p>User feedback in forms can be greatly improved by styling input fields with CSS pseudo-classes such as <code>:valid</code> and <code>:invalid</code>. These allow the browser's built-in form validation to be visually communicated to the user without using JavaScript. For example, an input field outline can turn green when the entered data meets the requirements, and red when it does not, helping users immediately recognize and correct mistakes. This kind of instant visual feedback enhances usability, reduces errors, and makes forms feel more interactive and user-friendly. Watch this short video on styling valid and invalid forms by Kevin Powell, to get some tips on how to do this. His video on form styling essentials is also worth watching, if you want extra tips on styling and creating form layouts.</p>"},{"location":"05-forms/#exercises","title":"Exercises","text":""},{"location":"05-forms/#your-own-search-engine","title":"Your Own Search Engine!","text":"<p>Use an HTML form to create your own web search, that initiates an HTTP GET request to a real search engine of your choice (Google, Bing, DuckDuckGo, Yahoo...). The form should have a input field with placeholder text and a search button for submitting the form. Make sure that the input field is automatically focused and that it is requied to fill in.</p> Example Solution <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n        &lt;title&gt;Googol&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Googol&lt;/h1&gt;\n        &lt;form action=\"https://www.google.com/search\"&gt;\n            &lt;input name=\"q\" placeholder=\"Enter search terms\" required autofocus /&gt;\n            &lt;button&gt;Search&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"05-forms/#a-login-screen","title":"A Login Screen","text":"<p>Create a form for logging in to a user account. The form should:</p> <ul> <li>Contain an email input and a password input.</li> <li>Include a \u201cRemember me\u201d checkbox (it should not persist the form data).</li> <li>Have a button for submitting the form data.</li> <li>Provide a <code>&lt;label&gt;</code> for each input.</li> <li>Group inputs inside a <code>&lt;fieldset&gt;</code> with a <code>&lt;legend&gt;</code>.</li> <li>Use the proper HTTP method.</li> </ul> <p>You do not have to style the HTML, but since input elements are inline elements, it might be a good idea to organize them with <code>&lt;div&gt;</code> or use <code>&lt;br&gt;</code>, so that they stack vertically.</p> Example Solution <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\" /&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n        &lt;title&gt;Login Form&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;form action=\"/login\" method=\"post\"&gt;\n                &lt;fieldset&gt;\n                    &lt;legend&gt;Login&lt;/legend&gt;\n                    &lt;div&gt;\n                        &lt;label for=\"email\"&gt;Email&lt;/label&gt;\n                        &lt;input type=\"email\" placeholder=\"Enter email\" required autofocus id=\"email\"&gt;\n                    &lt;div&gt;\n                        &lt;label for=\"password\"&gt;Password&lt;/label&gt;\n                        &lt;input type=\"password\" placeholder=\"Enter password\" required id=\"password\"&gt;\n                    &lt;/div&gt;\n                    &lt;div&gt;\n                        &lt;input type=\"checkbox\" id=\"remember-me\"&gt;\n                        &lt;label for=\"remember-me\"&gt;Remember me&lt;/label&gt;\n                    &lt;/div&gt;\n                    &lt;button&gt;Log in&lt;/button&gt;\n                &lt;/fieldset&gt;\n            &lt;/form&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"05-forms/#a-callback-form","title":"A Callback Form","text":"<p>The company you work for wants a web form for customers to schedule a call with them. The form should collect the following information:</p> <ul> <li>Full name</li> <li>Phone number (required, danish numbers only)</li> <li>Preferred date</li> <li>Preferred time window (morning, midday, noon or evening)</li> </ul> <p>Styling is not a priority.</p> Example Solution <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\" /&gt;\n        &lt;title&gt;Have Us Call You&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form action=\"/schedule-call\" method=\"post\"&gt;\n            &lt;h2&gt;Have Us Call You&lt;/h2&gt;\n            &lt;div&gt;\n                &lt;label for=\"name\"&gt;Full name&lt;/label&gt;\n                &lt;input id=\"name\" name=\"name\" autofocus /&gt;\n            &lt;/div&gt;\n\n            &lt;div&gt;\n                &lt;label for=\"phone-number\"&gt;Phone number*&lt;/label&gt;\n                &lt;input placeholder=\"+45\" size=\"3\" disabled/&gt;\n                &lt;input type=\"tel\" name=\"phone-number\" id=\"phone-number\" pattern=\"\\d{8}|\\d{2} \\d{2} \\d{2} \\d{2}\" required/&gt;\n            &lt;/div&gt;\n\n            &lt;div&gt;\n                &lt;label for=\"date\"&gt;Preferred date&lt;/label&gt;\n                &lt;input id=\"date\" name=\"date\" type=\"date\" /&gt;\n            &lt;/div&gt;\n\n            &lt;div&gt;\n                &lt;label for=\"timeWindow\"&gt;Preferred time window&lt;/label&gt;\n                &lt;select id=\"timeWindow\" name=\"timeWindow\"&gt;\n                    &lt;option value=\"\"&gt;No preference&lt;/option&gt;\n                    &lt;option value=\"morning\"&gt;Morning (08:00-12:00)&lt;/option&gt;\n                    &lt;option value=\"midday\"&gt;Midday (12:00-16:00)&lt;/option&gt;\n                    &lt;option value=\"afternoon\"&gt;Afternoon (16:00-20:00)&lt;/option&gt;\n                    &lt;option value=\"evening\"&gt;Evening (20:00-22:00)&lt;/option&gt;\n                &lt;/select&gt;\n            &lt;/div&gt;\n            &lt;button&gt;Request a Call&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"05-forms/#real-time-validation","title":"Real-Time Validation","text":"<p>The account creation form below is lacking real time feedback for validating the users input. It only validates the input when the user clicks the \"Create Account\" button. Style the input (using the css color variables) so that the user immediatly can see if the input is valid or invalid.</p> <pre><code>    &lt;!DOCTYPE html&gt;\n    &lt;html lang=\"en\"&gt;\n        &lt;head&gt;\n            &lt;meta charset=\"UTF-8\" /&gt;\n            &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n            &lt;title&gt;Create Account&lt;/title&gt;\n            &lt;style&gt;\n                :root {\n                    --primary: hsl(211, 100%, 50%);\n                    --valid: hsl(143, 100%, 26%);\n                    --invalid: hsl(348, 55%, 49%);\n                }\n\n                * {\n                    box-sizing: border-box;\n                }\n\n                input, button {\n                    font: inherit;\n                }\n\n                body {\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                    min-height: 100vh;\n                    margin: 0px;\n                    background: #f0f2f5;\n                    font-family: \"Segoe UI\", Tahoma, Geneva, Verdana, sans-serif;\n                }\n\n                form {\n                    background: #fff;\n                    padding: 40px;\n                    border-radius: 18px;\n                    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);\n                }\n\n                h2 {\n                    text-align: center;\n                    margin-bottom: 40px;\n                    color: #555;\n                }\n\n                label {\n                    display: block;\n                    margin-bottom: 6px;\n                    color: #555;\n                    font-weight: 500;\n                }\n\n                input {\n                    width: 100%;\n                    padding: 12px 15px;\n                    margin-bottom: 20px;\n                    border: 0px solid;\n                    border-radius: 8px;\n                    font-size: 16px;\n                    outline: 3px solid rgba(0, 123, 255, 0.2);\n                }\n\n                button {\n                    width: 100%;\n                    padding: 12px;\n                    background-color: var(--primary);\n                    color: white;\n                    border: none;\n                    border-radius: 8px;\n                    font-size: 16px;\n                    font-weight: 600;\n                    cursor: pointer;\n                }\n            &lt;/style&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;form action=\"/submit\" method=\"post\"&gt;\n                &lt;h2&gt;Create an Account&lt;/h2&gt;\n\n                &lt;label for=\"name\"&gt;Full Name&lt;/label&gt;\n                &lt;input type=\"text\" id=\"name\" name=\"name\" placeholder=\"John Doe\" required minlength=\"2\" maxlength=\"50\" autofocus /&gt;\n\n                &lt;label for=\"email\"&gt;Email&lt;/label&gt;\n                &lt;input type=\"email\" id=\"email\" name=\"email\" placeholder=\"example@mail.com\" required /&gt;\n\n                &lt;label for=\"password\"&gt;Password&lt;/label&gt;\n                &lt;input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Enter password\" required minlength=\"6\" /&gt;\n\n                &lt;button&gt;Create Account&lt;/button&gt;\n            &lt;/form&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre> Example Solution <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\" /&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n        &lt;title&gt;Create Account&lt;/title&gt;\n        &lt;style&gt;\n            :root {\n                --primary: hsl(211, 100%, 50%);\n                --valid: hsl(143, 100%, 26%);\n                --invalid: hsl(348, 55%, 49%);\n            }\n\n            * {\n                box-sizing: border-box;\n            }\n\n            input,\n            button {\n                font: inherit;\n            }\n\n            body {\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                min-height: 100vh;\n                margin: 0px;\n                background: #f0f2f5;\n                font-family: \"Segoe UI\", Tahoma, Geneva, Verdana, sans-serif;\n            }\n\n            form {\n                background: #fff;\n                padding: 40px;\n                border-radius: 18px;\n                box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);\n            }\n\n            h2 {\n                text-align: center;\n                margin-bottom: 40px;\n                color: #555;\n            }\n\n            label {\n                display: block;\n                margin-bottom: 6px;\n                color: #555;\n                font-weight: 500;\n            }\n\n            input {\n                width: 100%;\n                padding: 12px 15px;\n                margin-bottom: 20px;\n                border: 0px solid;\n                border-radius: 8px;\n                font-size: 16px;\n                outline: 3px solid rgba(0, 123, 255, 0.2);\n            }\n\n            button {\n                width: 100%;\n                padding: 12px;\n                background-color: var(--primary);\n                color: white;\n                border: none;\n                border-radius: 8px;\n                font-size: 16px;\n                font-weight: 600;\n                cursor: pointer;\n            }\n\n            input:not(:placeholder-shown):invalid {\n                outline-color: var(--invalid);\n            }\n\n            input:not(:placeholder-shown):valid {\n                outline-color: var(--valid);\n            }\n\n            input:focus:invalid {\n                outline-color: var(--primary);\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form action=\"/submit\" method=\"post\"&gt;\n            &lt;h2&gt;Create an Account&lt;/h2&gt;\n\n            &lt;label for=\"name\"&gt;Full Name&lt;/label&gt;\n            &lt;input type=\"text\" id=\"name\" name=\"name\" placeholder=\"John Doe\" required minlength=\"2\" maxlength=\"50\" autofocus /&gt;\n\n            &lt;label for=\"email\"&gt;Email&lt;/label&gt;\n            &lt;input type=\"email\" id=\"email\" name=\"email\" placeholder=\"example@mail.com\" required /&gt;\n\n            &lt;label for=\"password\"&gt;Password&lt;/label&gt;\n            &lt;input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Enter password\" required minlength=\"6\" /&gt;\n\n            &lt;button&gt;Create Account&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"05-forms/#a-payment-form","title":"A Payment Form","text":"<p>Create a payment form for credit cards. It should contain at least the cardholders name, the card number, expiry date and security code. It should utilize proper validation with immediate feedback, and a custom layout that arranges the input in a user friendly manner. For inspiration, see the image below.</p> <p></p> Example Solution <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\" /&gt;\n        &lt;title&gt;Payment Form&lt;/title&gt;\n        &lt;style&gt;\n            :root {\n                --primary: #007bff;\n                --secondary: #0056b3;\n                --valid: #4caf50;\n                --invalid: #f44336;\n                --border: #ccc;\n                --bg: #eeeded;\n                --card-bg: #f9f9f9;\n                --text: hsl(0, 0%, 24%);\n            }\n\n            * {\n                box-sizing: border-box;\n                margin: 0;\n            }\n\n            body {\n                font-family: \"Segoe UI\", Tahoma, Geneva, Verdana, sans-serif;\n                font-size: 1.125rem;\n                line-height: 1.6;\n                color: var(--text);\n                background: var(--bg);\n                padding-block-start: 10vb;\n            }\n\n            input,\n            button,\n            select {\n                border: 1px solid var(--border);\n                border-radius: 8px;\n                padding: 0.5rem;\n                outline: 1px solid transparent;\n            }\n\n            #card-details {\n                display: grid;\n                grid-column-gap: 0.8rem;\n                grid-auto-flow: column;\n                grid-template-columns: max-content 1fr;\n                grid-template-rows: max-content max-content;\n            }\n\n            h2 {\n                text-align: center;\n                margin-bottom: 1rem;\n            }\n\n            button {\n                background: var(--primary);\n                color: var(--bg);\n                cursor: pointer;\n            }\n\n            button:hover {\n                background: var(--secondary);\n            }\n\n            label {\n                text-transform: uppercase;\n                font-size: 0.75rem;\n            }\n\n            form {\n                display: grid;\n                padding: 2rem;\n                border-radius: 12px;\n                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n                max-width: 350px;\n                gap: 1.5rem;\n                margin: auto;\n                background: var(--card-bg);\n            }\n\n            .form-group {\n                display: grid;\n            }\n\n            #cvv {\n                max-width: 6ch;\n            }\n\n            input:not(:placeholder-shown):invalid {\n                outline-color: var(--invalid);\n            }\n\n            input:not(:placeholder-shown):valid,\n            select:not(:placeholder-shown):valid {\n                outline-color: var(--valid);\n            }\n\n            input:focus:invalid {\n                outline-color: var(--primary);\n            }\n\n            select:focus {\n                outline-color: var(--primary);\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form action=\"/payment\" method=\"post\"&gt;\n            &lt;h2&gt;Payment Details&lt;/h2&gt;\n\n            &lt;div class=\"form-group\"&gt;\n                &lt;label for=\"name\"&gt;Cardholder Name&lt;/label&gt;\n                &lt;input type=\"text\" id=\"name\" name=\"name\" required placeholder=\"John Doe\" minlength=\"2\" maxlength=\"50\" autocomplete=\"cc-name\" autofocus /&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"form-group\"&gt;\n                &lt;label for=\"card\"&gt;Card Number&lt;/label&gt;\n                &lt;input type=\"text\" id=\"card\" name=\"card\" pattern=\"\\d{16}|\\d{4} \\d{4} \\d{4} \\d{4}\" placeholder=\"1234 5678 9012 3456\" autocomplete=\"cc-number\" required /&gt;\n            &lt;/div&gt;\n\n            &lt;div id=\"card-details\"&gt;\n                &lt;label for=\"expiry-month\"&gt;Expiry Date&lt;/label&gt;\n                &lt;div id=\"expiry\"&gt;\n                    &lt;select id=\"expiry-month\" name=\"expiry-month\" autocomplete=\"cc-exp-month\" required&gt;\n                        &lt;option value=\"\"&gt;--&lt;/option&gt;\n                        &lt;option value=\"1\"&gt;01&lt;/option&gt;\n                        &lt;option value=\"2\"&gt;02&lt;/option&gt;\n                        &lt;option value=\"3\"&gt;03&lt;/option&gt;\n                        &lt;option value=\"4\"&gt;04&lt;/option&gt;\n                        &lt;option value=\"5\"&gt;05&lt;/option&gt;\n                        &lt;option value=\"6\"&gt;06&lt;/option&gt;\n                        &lt;option value=\"7\"&gt;07&lt;/option&gt;\n                        &lt;option value=\"8\"&gt;08&lt;/option&gt;\n                        &lt;option value=\"9\"&gt;09&lt;/option&gt;\n                        &lt;option value=\"10\"&gt;10&lt;/option&gt;\n                        &lt;option value=\"11\"&gt;11&lt;/option&gt;\n                        &lt;option value=\"12\"&gt;12&lt;/option&gt;\n                    &lt;/select&gt;\n                    &lt;span&gt;/&lt;/span&gt;\n                    &lt;select id=\"expiry-year\" name=\"expiry-year\" autocomplete=\"cc-exp-year\" required&gt;\n                        &lt;option value=\"\"&gt;----&lt;/option&gt;\n                        &lt;option value=\"2025\"&gt;2025&lt;/option&gt;\n                        &lt;option value=\"2026\"&gt;2026&lt;/option&gt;\n                        &lt;option value=\"2027\"&gt;2027&lt;/option&gt;\n                        &lt;option value=\"2028\"&gt;2028&lt;/option&gt;\n                        &lt;option value=\"2029\"&gt;2029&lt;/option&gt;\n                        &lt;option value=\"2030\"&gt;2030&lt;/option&gt;\n                        &lt;option value=\"2031\"&gt;2031&lt;/option&gt;\n                        &lt;option value=\"2032\"&gt;2032&lt;/option&gt;\n                        &lt;option value=\"2033\"&gt;2033&lt;/option&gt;\n                        &lt;option value=\"2034\"&gt;2034&lt;/option&gt;\n                        &lt;option value=\"2035\"&gt;2035&lt;/option&gt;\n                        &lt;option value=\"2036\"&gt;2036&lt;/option&gt;\n                        &lt;option value=\"2037\"&gt;2037&lt;/option&gt;\n                        &lt;option value=\"2038\"&gt;2038&lt;/option&gt;\n                        &lt;option value=\"2039\"&gt;2039&lt;/option&gt;\n                        &lt;option value=\"2040\"&gt;2040&lt;/option&gt;\n                        &lt;option value=\"2041\"&gt;2041&lt;/option&gt;\n                        &lt;option value=\"2042\"&gt;2042&lt;/option&gt;\n                        &lt;option value=\"2043\"&gt;2043&lt;/option&gt;\n                        &lt;option value=\"2044\"&gt;2044&lt;/option&gt;\n                        &lt;option value=\"2045\"&gt;2045&lt;/option&gt;\n                        &lt;option value=\"2046\"&gt;2046&lt;/option&gt;\n                        &lt;option value=\"2047\"&gt;2047&lt;/option&gt;\n                        &lt;option value=\"2048\"&gt;2048&lt;/option&gt;\n                        &lt;option value=\"2049\"&gt;2049&lt;/option&gt;\n                        &lt;option value=\"2050\"&gt;2050&lt;/option&gt;\n                    &lt;/select&gt;\n                &lt;/div&gt;\n                &lt;label for=\"cvv\"&gt;CVV&lt;/label&gt;\n                &lt;input id=\"cvv\" name=\"cvv\" required pattern=\"\\d{3}\" placeholder=\"123\" autocomplete=\"cc-csc\" /&gt;\n            &lt;/div&gt;\n            &lt;button&gt;Pay Now&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"05-forms/#your-own-survey","title":"Your Own Survey","text":"<p>Use what you have learned to create and style your own survey. You decice what the survey is for, but you must include as many form controls as possible: Range sliders, radio buttons, color pickers, file pickers, date/time pickers, drop-downs, multi-line text fields...</p> <p>When you are done, publish the survey and share it in the comment section below.</p>"},{"location":"05-forms/#nice-work","title":"Nice Work!","text":"<p>Take a few minutes to browse the forms created by your classmates. Leave a comment if something catches your attention </p>"},{"location":"06-web-design/","title":"Web Design","text":"<p>In this session, we will explore web design from a developer's perspective. While software engineers are not necessarily expected to become designers, a basic understanding of user experience (UX) and user interface (UI) design - including the ability to get into the mindset of the user - is essential for anyone involved in creating an interactive software product like a website. Moreover, front-end developers are often required to make design decisions in projects without dedicated designers.</p>"},{"location":"06-web-design/#preparation","title":"Preparation","text":""},{"location":"06-web-design/#web-design-overview","title":"Web Design Overview","text":"<p>In the video below, we will explore the core principles of user experience (UX) and user interface (UI) design, showing how thoughtful design decisions - like creating prototypes and planning layouts - can improve the way users interact with a website. You will also see how structured approaches, such as design systems and heuristic evaluation, help ensure consistency, clarity, and a better overall user experience.</p> <p>Still unsure about what UX is and why it matters? Watch this short video on the ROI of user experience.</p> <p>If you want to learn more about usability testing - and maybe conduct one yourself - read this article on usability testing 101. You can also learn more about heuristic evaluation, by taking a look at this article on 10 usability heuristics for user interface design by Jakob Nielsen, who also coined the term in the 90s.</p> <p>If you are want more concrete graphical tips on designing your UI, you can take a look at this article on safe visual design rules and this article on 16 little UI design tips that make a big impact.</p>"},{"location":"06-web-design/#accessibility","title":"Accessibility","text":"<p>Accessibility is a fundamental part of user experience in web development because it ensures that all users, including those with disabilities, can effectively interact with your website. In the video below, we will introduce the fundamentals of web accessibility. You will learn how proper focus management, semantic HTML, ARIA attributes, meaningful link and image text, and thoughtful color and contrast choices all contribute to an inclusive web experience. We will also cover practical testing methods, including using developer tools to simulate visual impairments, running accessibility audits with Lighthouse, and understanding how screen readers interact with web content.</p> <p>If you want to learn more, W3 Schools has created a comprehensive tutorial on accessibility. This article on how to review for accessibility also gives a good brief overview.</p>"},{"location":"06-web-design/#exercises","title":"Exercises","text":""},{"location":"06-web-design/#accessibility-audits","title":"Accessibility Audits","text":"<p>Perform accessibility audits (using Lighthouse in Chrome DevTools) on multiple websites of your choice. Identify good accessibility practices (passed audits) as well as areas for improvement.</p> <p>Share the website with the lowest accessibility score in the comments and describe at least one thing that it could improve.</p> Example Solution <p>Pokemon.com - Score: 59  Images either do not have an alt attribute or the text is redundant (automatically generated).</p>"},{"location":"06-web-design/#screen-reader-keyboard","title":"Screen Reader &amp; Keyboard","text":"<p>You are about to experience temporary vision loss! Install a screen reader (e.g. NVDA), and try to book a trip on VIA Trips. The website is blurred and does not allow for mouse input. You can toggle the blur on and off by pressing \"b\" on the keyboard if you need a little help </p> <p>Afterwards, try interacting with a website of your choice using only the keyboard. Then do it without looking, using a screen reader. Reflect on the main pain points of navigating, understanding and interacting with the content.</p>"},{"location":"06-web-design/#semantics","title":"Semantics","text":"<p>Update the markup below to use appropriate semantic HTML.</p> <pre><code>&lt;div class=\"header\"&gt;\n    &lt;h1&gt;My Website&lt;/h1&gt;\n&lt;/div&gt;\n\n&lt;div class=\"navigation\"&gt;&lt;a href=\"#\"&gt;Home&lt;/a&gt; | &lt;a href=\"#\"&gt;About&lt;/a&gt; | &lt;a href=\"#\"&gt;Contact&lt;/a&gt;&lt;/div&gt;\n\n&lt;div class=\"main\"&gt;\n    &lt;h2&gt;Welcome&lt;/h2&gt;\n    This is a simple website for working with semantic HTML.\n    &lt;br /&gt;&lt;br /&gt;\n    &lt;div class=\"button\"&gt;Click Me&lt;/div&gt;\n    &lt;div class=\"button\"&gt;Another Button&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div class=\"footer\"&gt;\n    &lt;p&gt;&amp;copy; 2025 My Website&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> Solution <pre><code>&lt;header&gt;\n&lt;h1&gt;My Website&lt;/h1&gt;\n&lt;/header&gt;\n\n&lt;nav&gt;\n    &lt;a href=\"#\"&gt;Home&lt;/a&gt; | &lt;a href=\"#\"&gt;About&lt;/a&gt; | &lt;a href=\"#\"&gt;Contact&lt;/a&gt;\n&lt;/nav&gt;\n\n&lt;main&gt;\n    &lt;h2&gt;Welcome&lt;/h2&gt;\n    &lt;p&gt;This is a simple website for working with semantic HTML.&lt;/p&gt;\n    &lt;button&gt;Click Me&lt;/button&gt;\n    &lt;button&gt;Another Button&lt;/button&gt;\n&lt;/main&gt;\n\n&lt;footer&gt;\n    &lt;p&gt;&amp;copy; 2025 My Website&lt;/p&gt;\n&lt;/footer&gt;\n</code></pre>"},{"location":"06-web-design/#aria","title":"ARIA","text":"<p>The search form below needs better accessibility for screen readers.</p> <ul> <li>Mark the search form as a distinct landmark so that screen readers can identify and navigate to it (you can read about the search landmark on MDN).</li> <li>Provide an appropriate label for the search input without adding a visible text label in the DOM.</li> </ul> <pre><code>&lt;form&gt;\n    &lt;input type=\"search\" name=\"search\" /&gt;\n&lt;/form&gt;\n</code></pre> Solution <pre><code>&lt;form role=\"search\"&gt;\n&lt;input\n    type=\"search\"\n    name=\"search\"\n    aria-label=\"Search for your favorite content on our site\" /&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"06-web-design/#descriptive-links","title":"Descriptive Links","text":"<p>Turn the links in the paragraph below into good, accessible links.</p> <pre><code>&lt;p&gt;\n  To explore our cooking resources, check out our recipe collection \n  (&lt;a href=\"/recipes\"&gt;click here&lt;/a&gt;), cooking tips \n  (&lt;a href=\"/tips\"&gt;click here&lt;/a&gt;), and ingredient guides\n  (&lt;a href=\"/ingredients.pdf\"&gt;learn more&lt;/a&gt;)\n&lt;/p&gt;\n</code></pre> Example Solution <pre><code>&lt;p&gt;\n    To explore our cooking resources, check out our \n    &lt;a href=\"/recipes\"&gt;recipe collection&lt;/a&gt;, \n    &lt;a href=\"/tips\"&gt;cooking tips&lt;/a&gt;, and \n    &lt;a href=\"/ingredients.pdf\"&gt;ingredient guides (PDF)&lt;/a&gt;.\n&lt;/p&gt;\n</code></pre>"},{"location":"06-web-design/#enhancing-link-accessibility","title":"Enhancing Link Accessibility","text":"<p>You have been given a list of links, but their styling is quite poor. They are hard to identify as links, and there is no clear visual feedback indicating their state - e.g. focused, active, or already visited.</p> <p>Assume that the existing CSS rules for the <code>a</code> selector cannot be modified. Modify the styles to provide a better user experience.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\" /&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n        &lt;title&gt;Styling Links&lt;/title&gt;\n        &lt;style&gt;\n            a {\n                text-decoration: none;\n                color: #666666;\n                outline: none;\n            }\n\n            /* Your code here */\n\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;Animals&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;Computers&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;Diversity and inclusion&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;Food&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;Medicine&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;Music&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Example Solution <pre><code>li a {\n    text-decoration: underline;\n    color: #00f;\n}\n\na:visited {\n    color: purple;\n}\n\na:hover {\n    color: orange;\n}\n\na:focus {\n    outline: auto black;\n}\n\na:active {\n    color: red;\n}\n</code></pre>"},{"location":"06-web-design/#reaching-100-in-lighthouse","title":"Reaching 100 in Lighthouse","text":"<p>The funion website (.zip) has accessibility issues. Fix them without touching the CSS!</p> <p>Try taking a look at the website first, to see if you can identify any issues yourself. After that, use Lighthouse to uncover more issues. You can also reference this checklist:</p> <ul> <li>The tab order causes the user to skip around a lot. Remove incorrect use of tabindex and change the tab order to the following:<ol> <li>Navigation link</li> <li>Search</li> <li>Content links</li> <li>Footer</li> </ol> </li> <li>Make sure proper semantic landmarks are used.</li> <li>Ensure that each landmark has a unique label when multiple landmarks of the same type are present on the page.</li> <li>Make sure images have proper descriptions.</li> <li>Make the link text more descriptive.</li> <li>Make sure all input fields are labeled.</li> <li>Give the document a title.</li> <li>Tell the browser the language of the website.</li> </ul> <p>Can you get all the way to an accessibility score of 100?</p> Solution <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles.css\" /&gt;\n        &lt;title&gt;The Funion&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            &lt;div class=\"container\"&gt;\n                &lt;h1 class=\"logo\"&gt;The Funion&lt;/h1&gt;\n                &lt;nav class=\"menu\" aria-label=\"Main Navigation\"&gt;\n                    &lt;ul&gt;\n                        &lt;li&gt;&lt;a href=\"#\"&gt;Politics&lt;/a&gt;&lt;/li&gt;\n                        &lt;li&gt;&lt;a href=\"#\"&gt;Business&lt;/a&gt;&lt;/li&gt;\n                        &lt;li&gt;&lt;a href=\"#\"&gt;Entertainment&lt;/a&gt;&lt;/li&gt;\n                        &lt;li&gt;&lt;a href=\"#\"&gt;Sports&lt;/a&gt;&lt;/li&gt;\n                        &lt;li class=\"pull-right\"&gt;\n                            &lt;a href=\"#\" class=\"btn-search\"&gt;&lt;img src=\"./images/search.svg\" alt=\"\" /&gt;Search&lt;/a&gt;\n                        &lt;/li&gt;\n                    &lt;/ul&gt;\n                &lt;/nav&gt;\n            &lt;/div&gt;\n        &lt;/header&gt;\n\n        &lt;main class=\"container\"&gt;\n            &lt;h2&gt;Top story&lt;/h2&gt;\n            &lt;article class=\"main-story\"&gt;\n                &lt;img class=\"float-right\" src=\"./images/cat.jpg\" alt=\"A cat staring menacingly off into space\" /&gt;\n                &lt;div class=\"info\"&gt;\n                    &lt;h3 class=\"headline\"&gt;&lt;a href=\"#\"&gt;Study shows 9 out of 10 cats quietly judging their owners as they sleep&lt;/a&gt;&lt;/h3&gt;\n                        GRAND RAPIDS, MI\u2014Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n                        aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure\n                        dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident,\n                        sunt in culpa qui officia deserunt mollit anim id est laborum.\n                    &lt;/p&gt;\n                &lt;/div&gt;\n            &lt;/article&gt;\n            &lt;div class=\"side-by-side\"&gt;\n                &lt;div class=\"column\"&gt;\n                    &lt;div class=\"tier-header\"&gt;\n                        &lt;h2&gt;In the news&lt;/h2&gt;\n                    &lt;/div&gt;\n                    &lt;article&gt;\n                        &lt;h3 class=\"headline\"&gt;\n                            &lt;a href=\"#\"&gt;Bee wonders if maybe everyone else is a drone and he's the only one who has it \"figured out.\"&lt;/a&gt;\n                        &lt;/h3&gt;\n                        &lt;img src=\"./images/bee.jpg\" alt=\"A bee on top of a flower\" /&gt;\n                    &lt;/article&gt;\n                &lt;/div&gt;\n                &lt;div class=\"column\"&gt;\n                    &lt;article&gt;\n                        &lt;img src=\"./images/telephone.jpg\" alt=\"A red, London telephone booth\" /&gt;\n                        &lt;div class=\"info\"&gt;\n                            &lt;h3 class=\"headline\"&gt;&lt;a href=\"#\"&gt;Telephone booths. How is this still a thing?&lt;/a&gt;&lt;/h3&gt;\n                            &lt;p&gt;\n                                LONDON\u2014Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n                                aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute\n                                irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat\n                                non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n                            &lt;/p&gt;\n                        &lt;/div&gt;\n                    &lt;/article&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"three-col\"&gt;\n                &lt;div class=\"tier-header\"&gt;\n                    &lt;h2&gt;Recommended&lt;/h2&gt;\n                &lt;/div&gt;\n                &lt;div class=\"columns\"&gt;\n                    &lt;article&gt;\n                        &lt;img src=\"./images/dog.jpg\" alt=\"A dog at a desk looks up at a laptop and mouse\"/&gt;\n                        &lt;div class=\"info\"&gt;\n                            &lt;h3 class=\"headline\"&gt;&lt;a href=\"#\"&gt;Turn man's best friend into man's best personal assistant.&lt;/a&gt;&lt;/h3&gt;\n                        &lt;/div&gt;\n                    &lt;/article&gt;\n                    &lt;article&gt;\n                        &lt;img src=\"./images/coffee.jpg\" alt=\"A cup of coffee on a table\"/&gt;\n                        &lt;div class=\"info\"&gt;\n                            &lt;h3 class=\"headline\"&gt;\n                                &lt;a href=\"#\"&gt;San Franciscans are losing their minds over this third wave, artisanal, fair trade, handcrafted, locavore coffee.&lt;/a&gt;\n                            &lt;/h3&gt;\n                        &lt;/div&gt;\n                    &lt;/article&gt;\n                    &lt;article&gt;\n                        &lt;img src=\"./images/football.jpg\" alt=\"A football player hands the ball off to another player\" /&gt;\n                        &lt;div class=\"info\"&gt;\n                            &lt;h3 class=\"headline\"&gt;&lt;a href=\"#\"&gt;Sportsball team scores a touchpoint to win the big race.&lt;/a&gt;&lt;/h3&gt;\n                        &lt;/div&gt;\n                    &lt;/article&gt;\n                &lt;/div&gt;\n                &lt;footer class=\"footer\"&gt;\n                    &lt;div class=\"container\"&gt;\n                        &lt;h3&gt;Like the Funion? Consider joining our newsletter!&lt;/h3&gt;\n                        &lt;input type=\"text\" aria-label=\"Provide email for newsletter\"/&gt;\n                        &lt;button&gt;Sign Up&lt;/button&gt;\n                        &lt;nav&gt;\n                            &lt;ul&gt;\n                                &lt;li&gt;&lt;a href=\"#\"&gt;Contact&lt;/a&gt;&lt;/li&gt;\n                                &lt;li&gt;&lt;a href=\"#\"&gt;Jobs&lt;/a&gt;&lt;/li&gt;\n                                &lt;li&gt;&lt;a href=\"#\"&gt;Legal&lt;/a&gt;&lt;/li&gt;\n                            &lt;/ul&gt;\n                        &lt;/nav&gt;\n                    &lt;/div&gt;\n                &lt;/footer&gt;   \n            &lt;/div&gt;\n        &lt;/main&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"06-web-design/#skip-link","title":"Skip Link","text":"<p>A score of 100 in accessibility does not equal perfect accessibility. There is still plenty of things, that Lighthouse does not take into consideration.</p> <p>Let's improve the accessibility of the funion website further by providing a skip link to the user. It should take the user to the main landmark.</p> Example Solution <p><pre><code>&lt;header&gt;\n    &lt;a href=\"#main-content\" class=\"skip-link\"&gt;Skip to the main content&lt;/a&gt;\n    &lt;!--...--&gt;\n    &lt;main id=\"main-content\" class=\"container\"&gt;\n        &lt;h2&gt;Top story&lt;/h2&gt;\n        &lt;!--...--&gt;\n    &lt;/main&gt;\n    &lt;!--...--&gt;\n&lt;/header&gt;\n</code></pre> <pre><code>.skip-link {\n    position: absolute;\n    top: -100px;\n    background: #00f;\n    color: #fff;\n    padding: 8px;\n    z-index: 100;\n    }\n\n.skip-link:focus {\n    top: 0;\n}\n</code></pre></p>"},{"location":"06-web-design/#constrast-ratio","title":"Constrast Ratio","text":"<p>Testing the contrast ratio of text on your website is important. While tools like Lighthouse usually perform this check automatically, the browser cannot always determine the ratio accurately when backgrounds include transparency, images, or other complex effects.</p> <p></p> <p>Visit historian of the future, and check the contrast ratio of the text manually using the color picker in the DevTools.</p>"},{"location":"06-web-design/#usability-assessment","title":"Usability Assessment","text":"<p>Using either an usability test or a heuristic evaluation, access the usabilty of a website.</p> <p>Conducting a usability test requires careful preparation to get meaningful results. Start by familiarizing yourself with the website: explore its features, content, and navigation so you understand how it is intended to be used. Next, define clear tasks for the user that reflect real-world goals, such as finding information, completing a form, or making a purchase.</p> <p>During the test, observe how users interact with the site, noting any difficulties, confusion, or errors. Avoid guiding the user; instead, let them attempt tasks on their own and ask follow-up questions to understand their thought process. You can even encourage them to think out loud. After the session, analyze your observations to identify usability problems and potential improvements.</p> <p>A heuristic evaluation, on the other hand, is a quick way to uncover many usability problems without involving users. In this method, you review the website against established usability principles, such as Nielsen's 10 heuristics, to identify potential issues. This approach allows you to systematically check for problems like unclear navigation, inconsistent design, lack of feedback, and accessibility barriers.</p> <p>Pick a website to evaluate. It can be one that drives you crazy when you use it, or one from the list below.</p> <ul> <li>Userinyerface</li> <li>Mit VIA</li> <li>Awesome Store</li> </ul> <p>Feel free to share your findings in the comments </p>"},{"location":"06-web-design/#prototyping-wireframing","title":"Prototyping &amp; Wireframing","text":"<p>Still have some time? You'll soon be creating wireframes for your websites before moving on to implementation. This is a great opportunity to explore wireframing tools like Balsamiq, or the more advanced and widely used Figma, which also allows you to create high-fidelity prototypes.</p>"},{"location":"06-web-design/#nice-work","title":"Nice Work!","text":"<p>Take a few minutes to browse the Lighthouse audits and usability assessments shared by your classmates. Leave a comment if something catches your attention </p>"},{"location":"07-second-project/","title":"Second Project","text":""},{"location":"07-second-project/#a-user-friendly-account-creation","title":"A User-Friendly Account Creation","text":"<p>In this project, you will design and implement a web form for creating a user account. The form should collect a variety of personal and preference-related data, while following best practices for usability, accessibility, and responsive design.</p> <p>You are free to choose the context for the form \u2014 for example, it could be for a social media site, a dating app, or a job discovery platform. Just make sure you choose a context that allows you to properly fulfill the requirements below.</p> <p>Requirements:</p> <ul> <li>Before starting the implementation, you must create wireframes or mockups of the form (using e.g. Figma, Balsamiq, or a white board).</li> <li>Incorporate a wide variety of form controls, including but not limited to: text input, textareas, dropdowns, radio buttons, checkboxes, file uploads, range sliders, and date pickers.</li> <li>Implement input validation to ensure that required fields are completed and values match the expected format (e.g. email, password rules, number ranges).</li> <li>Provide intuitive feedback to users as they interact with the form.</li> <li>Design for accessibility, including proper use of labels, visible focus states and keyboard navigation.</li> <li>Use semantic HTML elements and ARIA attributes to enhance accessibility and communicate form structure to assistive technologies.</li> <li>Use a coherent and accessible color scheme for your application.</li> <li>Optimize the experience for mobile users by using appropriate input types (e.g. tel, email, date), and ensuring your layout is responsive and touch-friendly.</li> <li>Use heuristic evaluations, accessibility auditing tools, and/or conduct usability tests to evaluate your form, and use the results to iterate and improve the user experience.</li> </ul> <p>You are more than welcome to get creative and add more requirements - e.g. conditional form fields based on user input, multi-step forms with progress bars, modals or popovers for extra information, or introducting light/dark theming.</p> <p>JavaScript or any external libraries or frameworks are still not allowed.</p> <p>Tips</p> <ul> <li>The projects will be discussed at the exam. Focus on applying what you've learned to make it easier to explain and showcase your skills. A more interesting project might lead to a more interesting discussion.</li> <li>Provide helpful validation feedback: Indicate errors clearly, and if possible, offer hints on how to fix them. Instant feedback reduces frustration.</li> <li>Put yourself in the shoes of the user: Consider their needs, background, and potential challenges when filling out your form.</li> <li>Consider collaborating directly through your GitHub repository, and/or use the Live Share plugin in VS Code to code together in real time.</li> </ul>"},{"location":"07-second-project/#submission","title":"Submission\ud83d\udce4","text":"<p>This is a group project to be completed with your existing SEP group. The deadline can be found on itslearning. Hand in before the deadline if you want feedback.</p> <p>You must host the web form using GitHub Pages and submit a .pdf file to the handin slot on itslearning, containing the following:</p> <ul> <li>A link to the web form.</li> <li>The wireframes or mockups you have created.</li> <li>A small description and reflection on the evaluation methods you have used (~1000 characters).</li> </ul>"},{"location":"08-javascript/","title":"JavaScript","text":"<p>So far, we've focused on building responsive and user-friendly websites using HTML and CSS. However, these sites have been mostly static, offering little room for user interaction or dynamic behavior. In this session, we'll introduce JavaScript - the browser's programming language - that will allow us to manipulate data as well as update and change both HTML and CSS, to create more dynamic web pages.</p>"},{"location":"08-javascript/#preparation","title":"Preparation","text":""},{"location":"08-javascript/#javascript-basics","title":"JavaScript Basics","text":"<p>JavaScript shines when it interacts with HTML and CSS, but before we dive into that, we'll make sure that you understand the fundaments of the language. In the video below, we'll get hands-on with basic language features including variables, data types, conditionals, functions, arrays, objects, loops and more! You're likely already familiar with most of these concepts from Java, but keep an eye out for the key conceptual and syntactical differences!</p> <p>To get an overview of the language, take a look at W3Schools' resources:</p> <ul> <li>JavaScript Introduction</li> <li>The Script Tag</li> <li>Syntax</li> <li>Variables</li> <li>Operators</li> <li>Conditionals</li> <li>Loops</li> <li>Strings</li> <li>Numbers</li> <li>Functions</li> <li>Objects</li> <li>The Date Object</li> <li>The Math Object</li> <li>Arrays</li> </ul>"},{"location":"08-javascript/#exercises","title":"Exercises","text":""},{"location":"08-javascript/#hello-javascript","title":"Hello, JavaScript!","text":"<p>In this session, the output of all exercises will be shown in the console of the DevTools.</p> <p>Start by creating an HTML document that includes a JavaScript file, which logs the message <code>Hello, JavaScript</code> to the console.</p> <p>To make your workflow easier, open the HTML file with Live Server, and undock the console from the browser window \u2014 we won't need to view the web page itself during this session.</p> Solution <p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;script src=\"my-script.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>console.log(\"Hello, JavaScript\")\n</code></pre></p>"},{"location":"08-javascript/#from-java-to-javascript","title":"From Java to JavaScript","text":"<p>Converting code from one programming language to another is called transpiling. Since you already know Java, transpile the Java code below to JavaScript.</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n        final String APP_NAME = \"FitTrack\";\n\n        String username = \"Michael\";\n        int age = 39;\n        double height = 1.90;\n        boolean isPremiumUser = true;\n\n        System.out.println(\"Welcome to \" + APP_NAME + \", \" + username);\n    }\n}\n</code></pre> Solution <pre><code>const APP_NAME = \"FitTrack\"\n\nlet username = \"Michael\"\nlet age = 39\nlet height = 1.90\nlet isPremiumUser = true\n\nconsole.log(\"Welcome to \" + APP_NAME + \", \" + username)\n</code></pre>"},{"location":"08-javascript/#debugging-javascript","title":"Debugging JavaScript","text":"<p>The code below has an error. Run the code in the browser and examine the console output. What is the error, and how can it be fixed?</p> <pre><code>const userName = \"Kasper\"\nuserName = \"Troels\"\n\nconsole.log(userName)\n</code></pre> Solution <p><pre><code>\"Uncaught TypeError: Assignment to constant variable\"\n</code></pre> <pre><code>let userName = \"Kasper\"\nuserName = \"Troels\"\n\nconsole.log(name)\n</code></pre></p>"},{"location":"08-javascript/#loose-strict-equality","title":"Loose &amp; Strict Equality","text":"<p>Which of the comparisons below evaluate to true? Why?</p> <pre><code>console.log(\"5\" == 5)\nconsole.log(\"5\" === 5)\nconsole.log(true == 1)\nconsole.log(true === 1)\nconsole.log(null == undefined)      \nconsole.log({} == {})\n</code></pre> Solution <pre><code>console.log(\"5\" == 5) // true\nconsole.log(\"5\" === 5) // false\nconsole.log(true == 1) // true\nconsole.log(true === 1) // false\nconsole.log(null == undefined)  // true    \nconsole.log({} == {}) // false\n</code></pre>"},{"location":"08-javascript/#meow-meow-meow","title":"Meow! Meow! Meow!","text":"<p>Write a function that prints \"Meow!\" to the console n times, where n is a number provided as input to the function.</p> Solution <pre><code>function meowing(n) {\n    for(let i = 0; i &lt; n ; i++) {\n        console.log(\"Meow!\")\n    }\n}\n</code></pre>"},{"location":"08-javascript/#military-time","title":"Military Time","text":"<p>Military time represents the current time using the 24-hour format. For example, a value of 1700 means it's 5:00 PM. Assuming that the user correctly provides a time between 0000 - 2359, write a function that determines whether the current time falls into one of the following categories:</p> <ul> <li>Morning: Any time before 08:00 AM</li> <li>School: Between 08:00 AM and 04:00 PM</li> <li>Evening: Any time after 04:00 PM</li> </ul> <pre><code>console.log(timeOfDay(prompt(\"Input military time (0000 - 2359)\")))\n\n// Your code here\n</code></pre> Solution <pre><code>console.log(timeOfDay(prompt(\"Input military time (0000 - 2359)\")))\n\nfunction timeOfDay(militaryTime) {\n    if (militaryTime &lt; 800) {\n        return \"Morning\"\n    } else if (militaryTime &lt; 1600) {\n        return \"School\"\n    } else {\n        return \"Evening\"\n    }\n}\n</code></pre>"},{"location":"08-javascript/#scope","title":"Scope","text":"<p>What is printed to the console? Why?</p> <pre><code>let x = 1\n\nfunction foo() {\n    x = 2\n    if (true) {\n        let x = 3\n        console.log(x)\n    }\n    console.log(x)\n}\n\nfoo()\n\nconsole.log(x)\n</code></pre> Solution <pre><code>3\n2\n2\n</code></pre>"},{"location":"08-javascript/#a-stack-overflow","title":"A Stack Overflow","text":"<p>The function below doesn't work as intended. Run the code and observe the error message in the console. Then, use the debugger to understand what happens step by step: Set a breakpoint inside the function in the \"Sources\" tab of the DevTools and follow the code execution line by line.</p> <p>Can you fix the function?</p> <pre><code>function countdown(number) {\n    console.log(number)\n    countdown(number - 1)\n}\n\ncountdown(5)\n</code></pre> Solution <p><pre><code>Uncaught RangeError: Maximum call stack size exceeded\n</code></pre> <pre><code>function countdown(number) {\n    console.log(number)\n    if (number &gt; 0)\n        countdown(number - 1)\n}\n\ncountdown(5)\n</code></pre></p>"},{"location":"08-javascript/#modifying-arrays","title":"Modifying Arrays","text":"<p>Modify the array using <code>pop</code> and <code>push</code> so that it mathes the output.</p> <pre><code>const backpack = [\"Notebook\"]\n\n// Your code here\n\nconsole.log(\"Backpack contains:\", backpack) // \u2192 [\"Pen\", \"Lunch Box\", \"Water Bottle\"]\n</code></pre> Solution <pre><code>const backpack = [\"Notebook\"]\n\nbackpack.pop()\nbackpack.push(\"Pen\")\nbackpack.push(\"Lunch Box\")\nbackpack.push(\"Water Bottle\")\n\nconsole.log(\"Backpack contains:\", backpack) // \u2192 [\"Pen\", \"Lunch Box\", \"Water Bottle\"]\n</code></pre>"},{"location":"08-javascript/#looping-through-an-array","title":"Looping through an Array","text":"<p>You're a Pok\u00e9mon trainer that wants to find the average base stats of your team. Complete the code so that it loops through all the pok\u00e9mon's base stats, sums them up, and then calculates the average.</p> <pre><code>let total = 0\nlet baseStats = [525, 395, 320, 490, 435, 600, 680]\n\nconsole.log(getAverage(baseStats))\n\nfunction getAverage(array) {\n    // Your code here\n}\n</code></pre> Solution <pre><code>function getAverage(array) {\n    total = 0\n    for (let value of array) {\n        total += value\n    }\n    return total / array.length\n}\n</code></pre>"},{"location":"08-javascript/#another-transpilation","title":"Another Transpilation!","text":"<p>Transpile the Java program below to JavaScript!</p> <pre><code>import java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        String studentName = \"Troels\";\n        ArrayList&lt;Integer&gt; grades = new ArrayList&lt;&gt;(Arrays.asList(85, 90, 78, 92, 88));\n        calculateGrade(studentName, grades);\n    }\n\n    public static void calculateGrade(String name, ArrayList&lt;Integer&gt; grades) {\n        int sum = 0;\n        for (int i = 0; i &lt; grades.size(); i++) {\n            sum += grades.get(i);\n        }\n\n        double average = sum / (double) grades.size();\n\n        if (average &gt;= 90) {\n            System.out.println(name + \" has an A average.\");\n        } else if (average &gt;= 80) {\n            System.out.println(name + \" has a B average.\");\n        } else {\n            System.out.println(name + \" needs improvement.\");\n        }\n    }\n}\n</code></pre> Solution <pre><code>let studentName = \"Troels\"\nlet grades = [85, 90, 78, 92, 88]\ncalculateGrade(studentName, grades)\n\nfunction calculateGrade(name, grades) {\n    let sum = 0\n    for (let i = 0; i &lt; grades.length; i++) {\n        sum += grades[i]\n    }\n\n    let average = sum / grades.length\n\n    if (average &gt;= 90) {\n        console.log(name + \" has an A average.\")\n    } else if (average &gt;= 80) {\n        console.log(name + \" has a B average.\")\n    } else {\n        console.log(name + \" needs improvement.\")\n    }\n}\n</code></pre>"},{"location":"08-javascript/#objectify-yourself","title":"Objectify Yourself!","text":"<p>Create an object literal of yourself! Give it appropriate properties like name, age and hobbies! Maybe even a method or two?</p> Example Solution <pre><code>let me = {\n    name: \"Kasper\",\n    age: 37,\n    hobbies: [\"Programming\", \"Game Development\", \"Gaming\", \"Pok\u00e9mon\", \"Board Games\"],\n    isMarried: true,\n    sing() {\n        console.log(\"LA LA LA LA!\")\n    },\n    ding() {\n        this.age++\n    },\n}\n</code></pre>"},{"location":"08-javascript/#iterating-over-an-object-array","title":"Iterating Over an Object Array","text":"<p>Loop through the array of Pokemon and log any fire Pokemon to the console.</p> <pre><code>const pokemonList = [\n    { name: \"Charmander\", type: \"Fire\" },\n    { name: \"Squirtle\", type: \"Water\" },\n    { name: \"Pikachu\", type: \"Electric\" },\n    { name: \"Vulpix\", type: \"Fire\" },\n    { name: \"Growlithe\", type: \"Fire\" },\n    { name: \"Geodude\", type: \"Rock/Ground\" },\n    { name: \"Eevee\", type: \"Normal\" },\n    { name: \"Abra\", type: \"Psychic\" },\n]\n</code></pre> Solution <pre><code>for (let i = 0; i &lt; pokemonList.length; i++) {\n    if (pokemonList[i].type === \"Fire\") {\n        console.log(pokemonList[i].name)\n    }\n}\n</code></pre>"},{"location":"08-javascript/#handling-null","title":"Handling Null","text":"<p>The code below simulates retrieving a user from a database by ID and sending them a message. However, there's a bug - the program crashes when trying to send a message to a user that doesn't exist.</p> <p>Run the code and identify the error shown in the console. Fix the <code>sendMessageToUser</code> function to handle missing users and print a clear message if no user is found.</p> <pre><code>const users = [\n    { id: 1, name: \"Troels\" },\n    { id: 2, name: \"Michael\" },\n    { id: 3, name: \"Richard\" }\n]\n\nfunction getUserById(id) {\n    for (let user of users) {\n        if (user.id === id) {\n            return user\n        }\n    }\n    return null\n}\n\nfunction sendMessageToUser(userId, message) {\n    const user = getUserById(userId)\n\n    // Your Code here\n\n    console.log(\"Sending message to \"  + user.name + \": \" + message)\n}\n\nsendMessageToUser(2, \"Hello!\")\nsendMessageToUser(5, \"Are you there?\")\n</code></pre> Solution <p><pre><code>Uncaught TypeError: Cannot read properties of null\n</code></pre> <pre><code>const users = [\n    { id: 1, name: \"Troels\" },\n    { id: 2, name: \"Michael\" },\n    { id: 3, name: \"Richard\" }\n]\n\nfunction getUserById(id) {\n    for (let user of users) {\n        if (user.id === id) {\n            return user\n        }\n    }\n    return null\n}\n\nfunction sendMessageToUser(userId, message) {\n    const user = getUserById(userId)\n\n    if (user === null) {\n        console.log(\"Error: No user found with id \" + userId)\n        return\n    }\n\n    console.log(\"Sending message to \" + user.name + \": \" + message)\n}\n\nsendMessageToUser(2, \"Hello!\")\nsendMessageToUser(5, \"Are you there?\")\n</code></pre></p>"},{"location":"08-javascript/#calculating-areas","title":"Calculating Areas","text":"<p>Create a function called that returns the area of a given shape.</p> <p>The function should have the following parameters:</p> <ul> <li>shape: a string representing the type of shape.</li> <li>a: a number representing the primary dimension (e.g. radius or width).</li> <li>b: an optional number used to supply the height of rectangles.</li> </ul> <p>The function should be able to deal with the following shapes:</p> <ul> <li>Circles (\u03c0 * radius * radius)</li> <li>Squares (side * side)</li> <li>Rectangles (width * height)</li> <li>If an unsupported shape is provided, return undefined.</li> </ul> Solution <pre><code>function calculateArea(shape, a, b) {\n    switch (shape.toLowerCase()) {\n        case \"circle\":\n            return Math.PI * a * a;\n        case \"square\":\n            return a * a;\n        case \"rectangle\":\n            if (typeof b === \"undefined\") return undefined;\n            return a * b;\n        default:\n            return undefined;\n    }\n}\n\nconsole.log(calculateArea(\"circle\", 3));        // \u2192 28.274333882308138\nconsole.log(calculateArea(\"square\", 4));        // \u2192 16\nconsole.log(calculateArea(\"rectangle\", 5, 10)); // \u2192 50\nconsole.log(calculateArea(\"triangle\", 5));      // \u2192 undefined\n</code></pre>"},{"location":"08-javascript/#is-it-christmas-yet","title":"Is It Christmas Yet?","text":"<p>Create a function, that calculates the amount of days until Christmas!</p> Tips <ul> <li><code>new Date()</code> creates a Date object with the current date and time.</li> <li><code>getFullYear()</code> returns the year of a date.</li> <li><code>new Date(year, month, day)</code> lets you create a specific date. Notice that months are 0-indexed!</li> <li>Subtracting two dates gives the difference in milliseconds.</li> <li>Convert milliseconds to days using <code>1000 * 60 * 60 * 24</code></li> <li>Use <code>Math.ceil</code> to round up so today counts as a full day.</li> <li>Don't forget to handle the case when Christmas has already passed this year!</li> </ul> Solution <pre><code>function daysUntilChristmas() {\n    const today = new Date()\n    const christmas = new Date(today.getFullYear(), 11, 24)\n\n    if (today &gt; christmas) christmas.setFullYear(today.getFullYear() + 1)\n\n    const differenceInMs = christmas - today\n    const differenceInDays = Math.ceil(differenceInMs / (1000 * 60 * 60 * 24))\n\n    return differenceInDays\n}\n\nconsole.log(\"Days until Christmas: \" + daysUntilChristmas())\n</code></pre>"},{"location":"08-javascript/#vowel-counting","title":"Vowel Counting","text":"<p>Create a function, that can count the vowels in an english sentence. You can use the code below as a starting point. For simplicity's sake, you don't have to account for \"y\" and \"w\" being vowels.</p> <pre><code>function countVowels(sentence) {\n    // Your code here\n}\n\nfunction isVowel(char) {\n    const VOWELS = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    // Your code here\n}\n\nconsole.log(countVowels(\"Pikachu is cute\")) // \u2192 6\n</code></pre> Solution <pre><code>function countVowels(sentence) {\n    let numberOfVowels = 0\n    for (let char of sentence.toLowerCase()) {\n        if (isVowel(char)) {\n            numberOfVowels++\n        }\n    }\n    return numberOfVowels;\n}\n\nfunction isVowel(char) {\n    const VOWELS = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (let vowel of VOWELS) {\n        if (vowel == char) return true\n    }\n    return false\n}\n\nconsole.log(countVowels(\"Hi, how are you?\")) // \u2192 6\n</code></pre>"},{"location":"08-javascript/#random-number-generator","title":"Random Number Generator","text":"<p>Create a function that returns a random number between a min (included) and a max (excluded) value.</p> Tips <ul> <li>The Math.random() static method returns a floating-point, pseudo-random number that's greater than or equal to 0 and less than 1.</li> <li>The Math.floor() static method returns the largest integer less than or equal to a given number.</li> <li>The expression below evaluates to a number between 1 and 10. <pre><code>Math.floor(Math.random() * 10) + 1\n</code></pre></li> <li>If you want a number between e.g. 5 and 10, you're really asking for a number in a range of 5 (10 - 5) possible values: 5, 6, 7, 8, or 9. So we first generate a random number between 0 and 5, and then shift it up by adding the min value (5 in this case).</li> </ul> Solution <pre><code>function randomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n</code></pre>"},{"location":"08-javascript/#the-mario-pyramid","title":"The Mario Pyramid","text":"<p>Recreate the famous half pyramid from the Mario games using hashtags and <code>console.log</code>!</p> <pre><code>function marioPyramid(height) {\n    // your code here\n}\n\nmarioPyramid(5)\n/*\nExpected output:\n#\n##\n###\n####\n#####\n*/\n</code></pre> Solutions <pre><code>function marioPyramid(height) {\n    for (let i = 1; i &lt;= height; i++) {\n        let row = \"\"\n        for (let j = 0; j &lt; i; j++) {\n            row += \"#\"\n        }\n\n        console.log(row)\n\n    }\n}\n\n// OR\n\nfunction marioPyramid(height) {\n    for (let line = \"#\"; line.length &lt;= height; line += \"#\") console.log(line)\n}\n</code></pre>"},{"location":"08-javascript/#mirror-mode","title":"Mirror Mode!","text":"<p>If you have played Mario, you probably noticed that the game was mirrored in the previous exercise! This time, you should implement the real pyramid from Mario! Depending on how you have implemented the previous exercise, you might be able to solve this by adding only a few lines of code!</p> Tip <ul> <li>Use two loops to create a row: One loop for the spaces (height - currentRow) and one loop for the hashes (currentRow).</li> </ul> <pre><code>function realMarioPyramid(height) {\n    // your code here\n}\n\nrealMarioPyramid(5)\n/*\nExpected output:\n    #\n   ##\n  ###\n ####\n#####\n*/\n</code></pre> Solution <pre><code>function realMarioPyramid(height) {\n    for (let i = 1; i &lt;= height; i++) {\n        let row = \"\"\n        for (let j = 0; j &lt; height - i; j++) {\n            row += \" \"\n        }\n\n        for (let k = 0; k &lt; i; k++) {\n            row += \"#\"\n        }\n        console.log(row)\n    }\n}\n</code></pre>"},{"location":"08-javascript/#nice-work","title":"Nice Work!","text":"<p>Phew! You've worked through a lot of exercises - great job! Take a well-deserved break, and if you have any questions, don't hesitate to leave them in the comment section below.</p>"},{"location":"09-browser-apis/","title":"Browser APIs","text":"<p>Now that you know the basics of JavaScript, it's time to see how it truly comes to life in the browser. In this session, you'll learn how JavaScript interacts with the web page through the Document Object Model (DOM), how to respond to user actions with events, and how to store data directly in the browser using the Web Storage APIs. With these tools, you'll move beyond static pages and start building fully interactive web applications.</p>"},{"location":"09-browser-apis/#preparation","title":"Preparation","text":""},{"location":"09-browser-apis/#the-document-object-model","title":"The Document Object Model","text":"<p>In this video, we'll explore the Document Object Model - the structured representation of a web page that JavaScript can interact with. You'll learn how to access elements, change their content, attributes and styles - all through DOM methods that let you manipulate the page dynamically.</p> <p>The videoes are coming soon! Use the resources below if you want to prepare sooner!</p> <p>For a written reference, check out W3Schools' resources:</p> <ul> <li>DOM intro</li> <li>DOM methods</li> <li>Accessing DOM elements</li> <li>Changing HTML</li> <li>Changing CSS</li> </ul>"},{"location":"09-browser-apis/#events","title":"Events","text":"<p>In the next video, we'll explore DOM events - how JavaScript can respond to user actions and browser-triggered events on a web page. You'll learn how to detect events like clicks, key presses, and pointer movements, and how to handle them using event listeners to make your pages interactive.</p> <p>Coming soon!</p> <p>W3Schools also has some good resource on DOM events and eventListeners</p>"},{"location":"09-browser-apis/#web-storage-apis","title":"Web Storage APIs","text":"<p>The Web Storage APIs let JavaScript store key/value pairs directly in the browser. This allows you to persist data across page reloads, without relying on the server. They're mostly used to store small amounts of data, allowing web pages to remember user preferences, save form inputs and track application state. In this video, we'll explore <code>localStorage</code> and <code>sessionStorage</code>, showing how to store data either permanently or just for the current session.</p> <p>Coming soon!</p> <p>If you want to learn more, MDN has a good resource on the Web Storage APIs.</p>"},{"location":"09-browser-apis/#more-apis","title":"More APIs","text":"<p>There are many more browser APIs to explore! For instance, setTimeout runs a function after a specified delay, the Canvas API can be used for drawing 2D graphics and the Fetch API retrieves resources (we will learn about fetch in a later session). If you want an overview of what you can do in the browser, take a look at this list of web APIs from MDN.</p>"},{"location":"09-browser-apis/#exercises","title":"Exercises","text":""},{"location":"09-browser-apis/#under-construction","title":"Under Construction","text":""},{"location":"10-third-project/","title":"Third Project","text":""},{"location":"10-third-project/#a-browser-game","title":"A Browser Game","text":"<p>For your final project, you will design and build a browser-based game using JavaScript. This project is your chance to get creative, write a lot of JavaScript, and apply everything you've learned about the DOM, events, and local storage.</p> <p>You are free to choose the type of game you want to build. The most important thing is that it\u2019s built using the technologies you've learned. Here's some inspiration:</p> <ul> <li> <p>Choose your own adventure - A story game with choices that affect the outcome.</p> </li> <li> <p>Quiz game - Multiple-choice trivia game with score tracking.</p> </li> <li> <p>Math trainer - Random math problems with tracking of correct answers and speed.</p> </li> <li> <p>Whack-a-mole - Click moles quickly as they pop up to score points.</p> </li> <li> <p>Typing speed test - Type quickly and accurately while measuring speed and errors.</p> </li> <li> <p>Simon says - Repeat a growing sequence of colors and sounds.</p> </li> <li> <p>Memory card game - Players flip cards to find matching pairs.</p> </li> <li> <p>Hangman - A word guessing game where players guess letters to reveal a hidden word.</p> </li> <li> <p>Clicker/idle game - Click buttons to earn points and buy upgrades that boost progress.</p> </li> </ul> <p>Requirements:</p> <ul> <li>The website must include a short description of the game and how to play it.</li> <li>The game must be based on the DOM API - that is, no Canvas or WebGL.</li> <li>The game must use localStorage to save game progress, scores, or settings.</li> <li>The game must display correctly and be fully playable on a desktop with a resolution of 1920\u00d71080. There is no other requirements for responsiveness.</li> </ul> <p>Animations are not a requirement, but they can bring your game to life. You can explore and use CSS animations and/or manually animate elements with JavaScript to add effects like blinking, fading, or moving elements, if you want an extra challenge!</p> <p>External libraries, frameworks and game engines are not allowed.</p> <p>Tips</p> <ul> <li>The projects will be discussed at the exam. Focus on applying what you've learned to make it easier to explain and showcase your skills. A more interesting project might lead to a more interesting discussion.</li> <li>Keep it simple! The DOM is not designed for fast-paced or graphics-heavy games, so focus on mechanics that rely on simple interaction and logic rather than constant motion. Ask, if you are unsure about the scope of your game idea!</li> <li>Don't jump straight into code. Plan your UI and game flow before implementing it.</li> <li>Start with a minimal viable product (MVP). What is the player doing most of the time? (guessing, reacting, choosing, etc.) Build that first, and then expand around it with UI, polish and extra game mechanics.</li> <li>Big problems needs to be broken down. Analyse the game that you want to make. What systems does it consist of? (UI, game logic, score board, persistence...) Can these systems be broken down further? Can you divide the work so everyone can develop their part without constantly depending on each other?</li> <li>Keep your code modular. Use functions for each piece of logic (e.g., <code>checkAnswer()</code>, <code>updateScore()</code>, <code>resetGame()</code>), so it's easier to understand and explain.</li> <li>Many game ideas require timing or repetition. Use setTimeout() to schedule something once after a delay, and setInterval() to repeat actions at fixed intervals (with can be stopped with clearInterval()).</li> <li>Consider collaborating directly through your GitHub repository, and/or use the Live Share plugin in VS Code to code together in real time.</li> </ul>"},{"location":"10-third-project/#submission","title":"Submission\ud83d\udce4","text":"<p>This is a group project to be completed with your existing SEP group. The deadline can be found on itslearning. Hand in before the deadline if you want feedback.</p> <p>You must host the game using GitHub Pages and submit the link to the site using the handin slot on itslearning.</p>"},{"location":"11-fetching-data/","title":"Fetching Data","text":""},{"location":"11-fetching-data/#preparation","title":"Preparation","text":""},{"location":"11-fetching-data/#foo","title":"Foo","text":""},{"location":"11-fetching-data/#exercises","title":"Exercises","text":""},{"location":"11-fetching-data/#bar","title":"Bar","text":""},{"location":"12-wrap-up/","title":"Wrap Up","text":"<p>\"Hejsa!\"</p> jscss <pre><code>export function add(a, b) {\n    return a + b\n}\n</code></pre> <pre><code>h1 {\n    text-align: center;\n}\n</code></pre> <p>```</p>"}]}